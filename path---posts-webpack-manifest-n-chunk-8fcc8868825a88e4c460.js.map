{"version":3,"sources":["webpack:///path---posts-webpack-manifest-n-chunk-8fcc8868825a88e4c460.js","webpack:///./.cache/json/posts-webpack-manifest-n-chunk.json"],"names":["webpackJsonp","478","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","fields","slug","frontmatter","date","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,OAAAC,OAAA,eAAsCC,gBAAmBC,GAAA,gJAAAC,KAAA,27NAAygNC,QAA8wBC,KAAA,oCAA0CC,aAAgBP,MAAA,8CAAAQ,KAAA,mBAAAC,MAAA,cAAqGC,aAAgBJ,KAAA","file":"path---posts-webpack-manifest-n-chunk-8fcc8868825a88e4c460.js","sourcesContent":["webpackJsonp([267396853523732],{\n\n/***/ 478:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"前端小誌\",\"author\":\"Ernie Yang\"}},\"markdownRemark\":{\"id\":\"/Users/ernieyang09/Desktop/workspace/gatsby-blog/src/pages/posts/2018/10/1014--webpack-manifest-n-chunk.md absPath of file >>> MarkdownRemark\",\"html\":\"<snippet>\\n  此篇為雜記，我想到啥就記啥。主要的話會跟js caching有關\\n  此篇webpack為4.x version\\n</snippet>\\n<p>在前端領域中，bundle是很重要的，dev build跟production build大小，我舉例手上的專案，9mb -> 3xx kb(gzip)。</p>\\n<p>關於檔案大小的部份不在此介紹中。這應該是比較簡單的part，只要你mode有開prodction應該就差很多了。\\n(好吧 我想寫caching 上集晚點補)</p>\\n<p>靜態檔案cache是一個很重要的機制，cache的好，使用者不用每次進網頁都載一次檔案。這點在前端蠻容易被忽略的(至少對於我本人)。在本地端開發的時候很少會感受到file size的影響，上了production習慣開dev tool + disable cached。</p>\\n<p>cache通常會提到server設定，不過我們這邊要提的如何讓webpack做long term cache</p>\\n<p>首先要知道的就是一般使用webpack output file會長這樣</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'[name].[chunkhash].js'</span><span class=\\\"token punctuation\\\">,</span>\\n  path<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'../dist'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<br/>\\n<p><strong>為什麼要加hash</strong></p>\\n<p>基於正常使用者不會每次進入頁面都clean cached，若是今天線上版的foo.js要更新</p>\\n<p>client端看到foo.js名稱一樣使用舊的cache，後果不堪設想。(頁面極度容易掛掉)</p>\\n<p>所以每次build的時候依據檔案的內容產生不一樣的的md5加在後面，client端看到不一樣的檔案名稱就會抓取新的檔案</p>\\n<p>為啥不用 static.file?v=xx.xx.xx 可以看參考</p>\\n<p>好解法=使用hash file name 先佈static file再佈頁面</p>\\n<p>這是如果有使用cdn之類的功能的話，如果是docker一起丟file+html是沒差的</p>\\n<p>請視狀況而定</p>\\n<p>long term caching講的是如何在每次佈版的時候，只針對最少的js改動(其他保留不變)</p>\\n<br />\\n<h3>hash &#x26;&#x26; chunkhash</h3>\\n<p>了解這兩個的差異是開始的第一步</p>\\n<p>不過自行了解一下code splitting(我好像沒介紹)</p>\\n<p>對於hash，計算所有chunks的hash，也就是所有檔案後面接的hash會一樣</p>\\n<p>對於chunkhash，每個chunk單獨計算hash</p>\\n<blockquote>\\n<p>不用在dev放上hash，會增加build的時間</p>\\n</blockquote>\\n<p>我們希望當只有一個檔案更新的時候使用者只需要抓一個檔案，想當然要用chunkhash</p>\\n<p>至於有使用ExtractTextPlugin的人可以google一下content-hash</p>\\n<p>因為我們在新的專案使用styled components所以沒有這個問題</p>\\n<p><br/><br/></p>\\n<p>這麼簡單的結束了嗎(X)</p>\\n<p>實際在做旳時候，就算是某檔案完全沒更動也是換了hash value。</p>\\n<p>上網查了後，我們還需要了解manifest與runtime</p>\\n<h4>runtime</h4>\\n<p>webpack在連接所有的code與module相依時(js load完了沒，這module需要啥其他module)，會需要一段code來做這些事情，而這段code就稱之runtime</p>\\n<h4>manifest</h4>\\n<p>當你寫著import, require，compile之後會變成webpack的module，在code裡面常常看到樣的code</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">__webpack_require__</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// &lt;&lt;&lt; id</span></code></pre>\\n      </div>\\n<p>而什麼module對應什麼id這些就是manifest做的</p>\\n<p>當你新增或刪除module, module排列的id會變動，這些東西寫在chunk裡面每次就需要rebuild。</p>\\n<p>在webpack4中，可以設置runChunk: true，會將runtime與manifest拉出來(each entry has a runtime)</p>\\n<p>這樣可以確保剩下的code之中不會挾雜其他\\b的module id</p>\\n<blockquote>\\n<p>webpack 4.x 沒有 CommonsChunkPlugin</p>\\n</blockquote>\\n<br />\\n<p>另外對於manifest，拉出來還不夠看。</p>\\n<p>webpack預設module是name by id(integer)</p>\\n<p>假設現在有 1 , 2 , 3, ,4 ,5 module</p>\\n<p>插入了新的module被歸類在3</p>\\n<p>1不變, 2不變, 3 new, 4 -> original 3, 5 -> original 4, 6, -> original 5</p>\\n<p>這樣子就rebuild了original 3, 4, 5</p>\\n<p>所以我們還會引入NamedModulesPlugin, HashedModuleIdsPlugin</p>\\n<p>一樣是用內容轉成hash，就算上述的事情發生，只需要build new or modified module and rebuild runtimeChunk使用者也不用重新loading file</p>\\n<br/>\\n<p>最後的配置(簡單的)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'[name].[chunkhash].js'</span><span class=\\\"token punctuation\\\">,</span>\\n  path<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'../dist'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\noptimization<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  runtimeChunk<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// this line</span>\\n  splitChunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'async'</span><span class=\\\"token punctuation\\\">,</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    cacheGroups<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// can do more if you have complex SPA</span>\\n      vendors<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/[\\\\\\\\/]node_modules[\\\\\\\\/]/</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'vendors'</span><span class=\\\"token punctuation\\\">,</span>\\n        chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'all'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      components<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/[\\\\\\\\/]components[\\\\\\\\/]/</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'components'</span><span class=\\\"token punctuation\\\">,</span>\\n        chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'all'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\nplugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>HashedModuleIdsPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// this line</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>想知道更深的進去參考挖吧</p>\\n<p><a href=\\\"https://www.zhihu.com/question/20790576/answer/32602154\\\">參考1 非常有用</a></p>\\n<p><a href=\\\"https://github.com/pigcan/blog/issues/9\\\">參考2 非常有用</a></p>\",\"fields\":{\"slug\":\"/posts/webpack-manifest-n-chunk/\"},\"frontmatter\":{\"title\":\"webpack production part 下(chunk & manifest)\",\"date\":\"2018-10-14T16:56\",\"tags\":[\"webpack\"]}}},\"pathContext\":{\"slug\":\"/posts/webpack-manifest-n-chunk/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-webpack-manifest-n-chunk-8fcc8868825a88e4c460.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"前端小誌\",\"author\":\"Ernie Yang\"}},\"markdownRemark\":{\"id\":\"/Users/ernieyang09/Desktop/workspace/gatsby-blog/src/pages/posts/2018/10/1014--webpack-manifest-n-chunk.md absPath of file >>> MarkdownRemark\",\"html\":\"<snippet>\\n  此篇為雜記，我想到啥就記啥。主要的話會跟js caching有關\\n  此篇webpack為4.x version\\n</snippet>\\n<p>在前端領域中，bundle是很重要的，dev build跟production build大小，我舉例手上的專案，9mb -> 3xx kb(gzip)。</p>\\n<p>關於檔案大小的部份不在此介紹中。這應該是比較簡單的part，只要你mode有開prodction應該就差很多了。\\n(好吧 我想寫caching 上集晚點補)</p>\\n<p>靜態檔案cache是一個很重要的機制，cache的好，使用者不用每次進網頁都載一次檔案。這點在前端蠻容易被忽略的(至少對於我本人)。在本地端開發的時候很少會感受到file size的影響，上了production習慣開dev tool + disable cached。</p>\\n<p>cache通常會提到server設定，不過我們這邊要提的如何讓webpack做long term cache</p>\\n<p>首先要知道的就是一般使用webpack output file會長這樣</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'[name].[chunkhash].js'</span><span class=\\\"token punctuation\\\">,</span>\\n  path<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'../dist'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<br/>\\n<p><strong>為什麼要加hash</strong></p>\\n<p>基於正常使用者不會每次進入頁面都clean cached，若是今天線上版的foo.js要更新</p>\\n<p>client端看到foo.js名稱一樣使用舊的cache，後果不堪設想。(頁面極度容易掛掉)</p>\\n<p>所以每次build的時候依據檔案的內容產生不一樣的的md5加在後面，client端看到不一樣的檔案名稱就會抓取新的檔案</p>\\n<p>為啥不用 static.file?v=xx.xx.xx 可以看參考</p>\\n<p>好解法=使用hash file name 先佈static file再佈頁面</p>\\n<p>這是如果有使用cdn之類的功能的話，如果是docker一起丟file+html是沒差的</p>\\n<p>請視狀況而定</p>\\n<p>long term caching講的是如何在每次佈版的時候，只針對最少的js改動(其他保留不變)</p>\\n<br />\\n<h3>hash &#x26;&#x26; chunkhash</h3>\\n<p>了解這兩個的差異是開始的第一步</p>\\n<p>不過自行了解一下code splitting(我好像沒介紹)</p>\\n<p>對於hash，計算所有chunks的hash，也就是所有檔案後面接的hash會一樣</p>\\n<p>對於chunkhash，每個chunk單獨計算hash</p>\\n<blockquote>\\n<p>不用在dev放上hash，會增加build的時間</p>\\n</blockquote>\\n<p>我們希望當只有一個檔案更新的時候使用者只需要抓一個檔案，想當然要用chunkhash</p>\\n<p>至於有使用ExtractTextPlugin的人可以google一下content-hash</p>\\n<p>因為我們在新的專案使用styled components所以沒有這個問題</p>\\n<p><br/><br/></p>\\n<p>這麼簡單的結束了嗎(X)</p>\\n<p>實際在做旳時候，就算是某檔案完全沒更動也是換了hash value。</p>\\n<p>上網查了後，我們還需要了解manifest與runtime</p>\\n<h4>runtime</h4>\\n<p>webpack在連接所有的code與module相依時(js load完了沒，這module需要啥其他module)，會需要一段code來做這些事情，而這段code就稱之runtime</p>\\n<h4>manifest</h4>\\n<p>當你寫著import, require，compile之後會變成webpack的module，在code裡面常常看到樣的code</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">__webpack_require__</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// &lt;&lt;&lt; id</span></code></pre>\\n      </div>\\n<p>而什麼module對應什麼id這些就是manifest做的</p>\\n<p>當你新增或刪除module, module排列的id會變動，這些東西寫在chunk裡面每次就需要rebuild。</p>\\n<p>在webpack4中，可以設置runChunk: true，會將runtime與manifest拉出來(each entry has a runtime)</p>\\n<p>這樣可以確保剩下的code之中不會挾雜其他\\b的module id</p>\\n<blockquote>\\n<p>webpack 4.x 沒有 CommonsChunkPlugin</p>\\n</blockquote>\\n<br />\\n<p>另外對於manifest，拉出來還不夠看。</p>\\n<p>webpack預設module是name by id(integer)</p>\\n<p>假設現在有 1 , 2 , 3, ,4 ,5 module</p>\\n<p>插入了新的module被歸類在3</p>\\n<p>1不變, 2不變, 3 new, 4 -> original 3, 5 -> original 4, 6, -> original 5</p>\\n<p>這樣子就rebuild了original 3, 4, 5</p>\\n<p>所以我們還會引入NamedModulesPlugin, HashedModuleIdsPlugin</p>\\n<p>一樣是用內容轉成hash，就算上述的事情發生，只需要build new or modified module and rebuild runtimeChunk使用者也不用重新loading file</p>\\n<br/>\\n<p>最後的配置(簡單的)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'[name].[chunkhash].js'</span><span class=\\\"token punctuation\\\">,</span>\\n  path<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'../dist'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\noptimization<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  runtimeChunk<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// this line</span>\\n  splitChunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'async'</span><span class=\\\"token punctuation\\\">,</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    cacheGroups<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// can do more if you have complex SPA</span>\\n      vendors<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/[\\\\\\\\/]node_modules[\\\\\\\\/]/</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'vendors'</span><span class=\\\"token punctuation\\\">,</span>\\n        chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'all'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      components<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/[\\\\\\\\/]components[\\\\\\\\/]/</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'components'</span><span class=\\\"token punctuation\\\">,</span>\\n        chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'all'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\nplugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>HashedModuleIdsPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// this line</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>想知道更深的進去參考挖吧</p>\\n<p><a href=\\\"https://www.zhihu.com/question/20790576/answer/32602154\\\">參考1 非常有用</a></p>\\n<p><a href=\\\"https://github.com/pigcan/blog/issues/9\\\">參考2 非常有用</a></p>\",\"fields\":{\"slug\":\"/posts/webpack-manifest-n-chunk/\"},\"frontmatter\":{\"title\":\"webpack production part 下(chunk & manifest)\",\"date\":\"2018-10-14T16:56\",\"tags\":[\"webpack\"]}}},\"pathContext\":{\"slug\":\"/posts/webpack-manifest-n-chunk/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-webpack-manifest-n-chunk.json\n// module id = 478\n// module chunks = 267396853523732"],"sourceRoot":""}
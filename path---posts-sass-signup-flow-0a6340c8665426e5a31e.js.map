{"version":3,"sources":["webpack:///path---posts-sass-signup-flow-0a6340c8665426e5a31e.js","webpack:///./.cache/json/posts-sass-signup-flow.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/posts-sass-signup-flow.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","fields","slug","frontmatter","date","tags","pathContext"],"mappings":"AAAAA,cAAc,qBAERC,gFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,cACAC,MAAA,OACAC,OAAA,eAGAC,gBACAC,GAAA,wIACAC,KAAA,0rDACAC,QACAC,KAAA,4BAEAC,aACAP,MAAA,8BACAQ,KAAA,mBACAC,MACA,YAKAC,aACAJ,KAAA","file":"path---posts-sass-signup-flow-0a6340c8665426e5a31e.js","sourcesContent":["webpackJsonp([15584883632513466000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/posts-sass-signup-flow.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"site\": {\n\t\t\t\t\"siteMetadata\": {\n\t\t\t\t\t\"title\": \"前端小誌\",\n\t\t\t\t\t\"author\": \"Ernie Yang\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"id\": \"/Users/ernieyang09/Desktop/workspace/gatsby-blog/src/pages/posts/2017/08/0820--sass-signup-flow.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\"html\": \"<p><snippet>譯: <a href=\\\"https://conversionxl.com/blog/saas-signup-flows/\\\">3 Common SaaS Sign-Up Flows (and a Friction-Based Analysis)</a></snippet></p>\\n<p>非心理系出身，若是有專有名詞翻錯，請指正。</p>\\n<p>摩擦</p>\\n<blockquote>\\n<p>當參訪者嘗試完成一個動作的時候所遇到的心理上的反抗，是轉換率殺手。</p>\\n</blockquote>\\n<p>你可以試著優化產品的價值主張與call to action buttons(行動按鈕)，但若是你的註冊流程包涵了太多的摩擦，你就會流失你的客戶。</p>\\n<p>減少摩擦就是最有效率增加轉換率的方式。然而，如果你只是胡亂猜測的話，是很難去辨識摩擦來源的。</p>\\n<p>摩擦會出現在網頁的各處，我們這邊只講註冊流程，也是通常摩擦最容易發生的地方。</p>\\n<h3>摩擦與註冊流程</h3>\\n<p>摩擦就是使用者必須要多精通註冊流程的測量。</p>\\n<p>雖然因為多樣性與客觀性很難去量化標準，但還是可以使用三種因子去做評估</p>\\n<ol>\\n<li>\\n<p>完成步驟 - 使用者會經過的一連串的頁面與步驟的數量。</p>\\n</li>\\n<li>\\n<p>資訊代價 - 使用者必須填寫的資訊數量。</p>\\n</li>\\n<li>\\n<p>付出投資 - 使用者必須做的決定與額外須要完成的活動。(像是email認証，CAPTCHA，其他...)</p>\\n</li>\\n</ol>\\n<p>這邊有幾種註冊流程的設計方式，他們各自有優缺點。但是最終的目的都是為了減少摩擦，最大價值化客戶與利潤。</p>\\n<h3>三種常見的註冊流程與如何減少摩擦</h3>\\n<p>雖然市面上有很多種註冊流程，通常可以分為以下三類，各自都有優缺點，當然也要考慮到你的產品與使用情境。\\n總而言之，這裡有三種常見的使用情境與評論。</p>\\n<ol>\\n<li>\\n<p>完整的流程後登入app</p>\\n<blockquote>\\n<p>註冊(Email+密碼) -> 帳號設置 -> Email確認 -> App</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>這差不多是現今最常見的註冊流程，使用者先將所有資訊填好，之後才能登入程式。</p>\\n<h4>這有什麼好處</h4>\\n<p>對於初始者非常熟悉此流程，人腦對於流程如何進行會先定義心智模型。所以當他們看到相關的模型，在認知上只須要花很少的力。因此我們對於這個流程就感到不錯。</p>\\n<p>另外一個主要的原因就是我們可以確保垃圾郵件發送者會盡可能的遠離我們的app。安全性十足。</p>\\n<h4>可能做錯了什麼</h4>\\n<p>在使用者進入app之前問太多資訊可能會導致退火。</p>\\n<p>營運試著獲得更多資訊，但越多資訊填寫，同時也產生越多摩擦。</p>\\n<p>如果你試著一開始就問更多的資訊，確認有解釋每一個動作以便消除摩擦。</p>\\n<p>Samuel Hulick:</p>\\n<blockquote>\\n<p>當使用者註冊的時候，他們的注意力是很珍貴的。你可以想像成在宇宙中被釋放的一小撮空氣 - 你必須盡可能的去使用它當它還在的時候。 最好的方式是靠減少摩擦 - 意思是定義清楚與有意義的動作將會提升使用者通過一開始的流程。<br />\\n舉例來說，如果你想要一個人去做pizza，你不會一開始說\\\"讓我們從揉捏麵糰與煨醬開始\\u001d...\\\"<br />\\n你應該說\\\"讓我們來做個pizza，我們會從揉捏麵糰與煨醬開始\\\"當你圍繞著最終目標而建構兩個活動，這幫助使用者了解為什麼這些是很重要的然要建立動機去完成他們。</p>\\n</blockquote>\\n<p>總結一下，如杲你想要讓使用者通過註冊並且維持使用者體驗，確認他們知道為什麼他們必須完成每一項任務。</p>\\n<p>待續....</p>\",\n\t\t\t\t\"fields\": {\n\t\t\t\t\t\"slug\": \"/posts/sass-signup-flow/\"\n\t\t\t\t},\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"3 Common SaaS Sign-Up Flows\",\n\t\t\t\t\t\"date\": \"2018-08-20T22:03\",\n\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\"UI/UX\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/posts/sass-signup-flow/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-sass-signup-flow-0a6340c8665426e5a31e.js","module.exports = {\n\t\"data\": {\n\t\t\"site\": {\n\t\t\t\"siteMetadata\": {\n\t\t\t\t\"title\": \"前端小誌\",\n\t\t\t\t\"author\": \"Ernie Yang\"\n\t\t\t}\n\t\t},\n\t\t\"markdownRemark\": {\n\t\t\t\"id\": \"/Users/ernieyang09/Desktop/workspace/gatsby-blog/src/pages/posts/2017/08/0820--sass-signup-flow.md absPath of file >>> MarkdownRemark\",\n\t\t\t\"html\": \"<p><snippet>譯: <a href=\\\"https://conversionxl.com/blog/saas-signup-flows/\\\">3 Common SaaS Sign-Up Flows (and a Friction-Based Analysis)</a></snippet></p>\\n<p>非心理系出身，若是有專有名詞翻錯，請指正。</p>\\n<p>摩擦</p>\\n<blockquote>\\n<p>當參訪者嘗試完成一個動作的時候所遇到的心理上的反抗，是轉換率殺手。</p>\\n</blockquote>\\n<p>你可以試著優化產品的價值主張與call to action buttons(行動按鈕)，但若是你的註冊流程包涵了太多的摩擦，你就會流失你的客戶。</p>\\n<p>減少摩擦就是最有效率增加轉換率的方式。然而，如果你只是胡亂猜測的話，是很難去辨識摩擦來源的。</p>\\n<p>摩擦會出現在網頁的各處，我們這邊只講註冊流程，也是通常摩擦最容易發生的地方。</p>\\n<h3>摩擦與註冊流程</h3>\\n<p>摩擦就是使用者必須要多精通註冊流程的測量。</p>\\n<p>雖然因為多樣性與客觀性很難去量化標準，但還是可以使用三種因子去做評估</p>\\n<ol>\\n<li>\\n<p>完成步驟 - 使用者會經過的一連串的頁面與步驟的數量。</p>\\n</li>\\n<li>\\n<p>資訊代價 - 使用者必須填寫的資訊數量。</p>\\n</li>\\n<li>\\n<p>付出投資 - 使用者必須做的決定與額外須要完成的活動。(像是email認証，CAPTCHA，其他...)</p>\\n</li>\\n</ol>\\n<p>這邊有幾種註冊流程的設計方式，他們各自有優缺點。但是最終的目的都是為了減少摩擦，最大價值化客戶與利潤。</p>\\n<h3>三種常見的註冊流程與如何減少摩擦</h3>\\n<p>雖然市面上有很多種註冊流程，通常可以分為以下三類，各自都有優缺點，當然也要考慮到你的產品與使用情境。\\n總而言之，這裡有三種常見的使用情境與評論。</p>\\n<ol>\\n<li>\\n<p>完整的流程後登入app</p>\\n<blockquote>\\n<p>註冊(Email+密碼) -> 帳號設置 -> Email確認 -> App</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>這差不多是現今最常見的註冊流程，使用者先將所有資訊填好，之後才能登入程式。</p>\\n<h4>這有什麼好處</h4>\\n<p>對於初始者非常熟悉此流程，人腦對於流程如何進行會先定義心智模型。所以當他們看到相關的模型，在認知上只須要花很少的力。因此我們對於這個流程就感到不錯。</p>\\n<p>另外一個主要的原因就是我們可以確保垃圾郵件發送者會盡可能的遠離我們的app。安全性十足。</p>\\n<h4>可能做錯了什麼</h4>\\n<p>在使用者進入app之前問太多資訊可能會導致退火。</p>\\n<p>營運試著獲得更多資訊，但越多資訊填寫，同時也產生越多摩擦。</p>\\n<p>如果你試著一開始就問更多的資訊，確認有解釋每一個動作以便消除摩擦。</p>\\n<p>Samuel Hulick:</p>\\n<blockquote>\\n<p>當使用者註冊的時候，他們的注意力是很珍貴的。你可以想像成在宇宙中被釋放的一小撮空氣 - 你必須盡可能的去使用它當它還在的時候。 最好的方式是靠減少摩擦 - 意思是定義清楚與有意義的動作將會提升使用者通過一開始的流程。<br />\\n舉例來說，如果你想要一個人去做pizza，你不會一開始說\\\"讓我們從揉捏麵糰與煨醬開始\\u001d...\\\"<br />\\n你應該說\\\"讓我們來做個pizza，我們會從揉捏麵糰與煨醬開始\\\"當你圍繞著最終目標而建構兩個活動，這幫助使用者了解為什麼這些是很重要的然要建立動機去完成他們。</p>\\n</blockquote>\\n<p>總結一下，如杲你想要讓使用者通過註冊並且維持使用者體驗，確認他們知道為什麼他們必須完成每一項任務。</p>\\n<p>待續....</p>\",\n\t\t\t\"fields\": {\n\t\t\t\t\"slug\": \"/posts/sass-signup-flow/\"\n\t\t\t},\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"3 Common SaaS Sign-Up Flows\",\n\t\t\t\t\"date\": \"2018-08-20T22:03\",\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"UI/UX\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/posts/sass-signup-flow/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-sass-signup-flow.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/posts-sass-signup-flow.json\n// module chunks = 15584883632513466000"],"sourceRoot":""}
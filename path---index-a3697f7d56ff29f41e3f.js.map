{"version":3,"sources":["webpack:///path---index-a3697f7d56ff29f41e3f.js","webpack:///./.cache/json/index.json"],"names":["webpackJsonp","459","module","exports","data","allMarkdownRemark","edges","node","fields","slug","frontmatter","title","date","tags","release","html","pathContext","offset","paginations","total"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,mBAAqBC,QAAUC,MAAQC,QAAUC,KAAA,wBAA8BC,aAAgBC,MAAA,kBAAAC,KAAA,mBAAAC,MAAA,KAAAC,SAAA,GAAgFC,KAAA,0jDAAwlDR,MAAQC,QAAUC,KAAA,2BAAiCC,aAAgBC,MAAA,oBAAAC,KAAA,mBAAAC,MAAA,UAAAC,SAAA,GAAuFC,KAAA,gtLAA47LR,MAAQC,QAAUC,KAAA,kBAAwBC,aAAgBC,MAAA,aAAAC,KAAA,mBAAAC,MAAA,cAAAC,SAAA,GAAoFC,KAAA,oPAA4PR,MAAQC,QAAUC,KAAA,wBAA8BC,aAAgBC,MAAA,mBAAAC,KAAA,mBAAAC,MAAA,KAAAC,SAAA,GAAiFC,KAAA,40BAAo1BR,MAAQC,QAAUC,KAAA,gCAAsCC,aAAgBC,MAAA,kCAAAC,KAAA,mBAAAC,MAAA,UAAAC,SAAA,GAAqGC,KAAA,y8PAAutQR,MAAQC,QAAUC,KAAA,oCAA0CC,aAAgBC,MAAA,8CAAAC,KAAA,mBAAAC,MAAA,WAAAC,SAAA,GAAkHC,KAAA,g8NAA6nOC,aAAgBC,OAAA,EAAAC,YAAA,EAAAC,MAAA","file":"path---index-a3697f7d56ff29f41e3f.js","sourcesContent":["webpackJsonp([142629428675168],{\n\n/***/ 459:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/posts/locale-linux/\"},\"frontmatter\":{\"title\":\"locale in linux\",\"date\":\"2019-04-13T14:54\",\"tags\":[\"雜\"],\"release\":true},\"html\":\"<snippet>\\n<p>只速記一下，工作時遇到的aws機器上utf-8檔名的問題(每次遇到都花很多時間處理)</p>\\n</snippet>\\n<p>遇到的問題是要從windows將utf8(中文)的檔案與資料夾搬到aws的機器上用python3進行處理</p>\\n<p>我們會先將資料zip起來在搬過去(太多也太大)</p>\\n<p>總共會連續遇到幾個問題</p>\\n<ol>\\n<li>unzip的問題</li>\\n</ol>\\n<p>在windows使用內建的zip，格式好像是用utf16儲存檔名(未驗證)</p>\\n<p>解法: 使用7zip, winrar.....等</p>\\n<p>2\\b. 檔案在linux顯示的問題</p>\\n<p>如果上一步是正確的utf8，解壓縮後在cli下ls還是會看到一堆問號</p>\\n<p>但是如果將檔案move回mac上是正常顯示的<br/>\\n(我記得utf16好像也是正常顯示，mac威能)</p>\\n<ol start=\\\"3\\\">\\n<li>python中顯示的問題</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> os\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>os<span class=\\\"token punctuation\\\">.</span>listdir<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>得到了類似unicode的編碼，我沒有截圖</p>\\n<p>但這串code是str且轉不回unicode(每個字有三個bytes) 我沒有特別去研究這編碼</p>\\n<p>做了超久的嘗試，最後在網路上找到了LC<em>ALL, LC</em>CTYPE, LANG等linux locale參數</p>\\n<p>死馬當活馬醫，設LC<em>ALL=en</em>US.UTF-8</p>\\n<p>linux下 ls就顯示正常，然後進了python也顯示正常了!!!!!!</p>\\n<p>locale就是像windows的地區一樣，設置系統用的語言環境</p>\\n<p>一般沒設的話應該就是C(sytem default，但這default到底是什麼?)</p>\\n<p>設成en_US.UTF-8後，理所當然ls應該是會改變的，但python為什麼會變呢</p>\\n<p>研究以後發現python的listdir, open,.....的實作是用C語言的(我指的是cpython compiler，一般人裝的都是這個)</p>\\n<p>而在讀值的時候就會吃環境變數(但是像file.read就能指定encoding)</p>\\n<p>所以修改了LC_ALL不只std out的format，連python code也能正常顯示listdir囉</p>\\n<p>至於LC_ALL LC_CTYPE LANG就想成LC_ALL > LC_CTYPE > LANG，上位的設置以後下面的就失效了</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/posts/python-for-loop/\"},\"frontmatter\":{\"title\":\"python for loop比較\",\"date\":\"2019-03-30T11:53\",\"tags\":[\"python\"],\"release\":true},\"html\":\"<p>range 直接回傳list</p>\\n<p>range(start, stop[, step]) 到stop結束，但不包含stop</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">length <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">#假設是5</span>\\n\\n<span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> length<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\"># [0,1,2,3,4]</span>\\n\\n<span class=\\\"token comment\\\"># 反過來就要</span>\\n<span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span>length<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\"># [4,3,2,1,0]</span></code></pre>\\n      </div>\\n<p>xrange是generator</p>\\n<p>一次只回傳一個</p>\\n<p>for loop的話xrange會比range效能好，因為xrange不用allocate array</p>\\n<p>目前python3的range就是python2的xrange</p>\\n<p>如果要return list就要</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token builtin\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">xrange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>實測python2</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">python -m timeit <span class=\\\"token string\\\">'for i in range(1000000):'</span> <span class=\\\"token string\\\">' pass'</span>\\n<span class=\\\"token comment\\\"># 10 loops, best of 3: 18.5 msec per loop</span>\\npython -m timeit <span class=\\\"token string\\\">'for i in xrange(1000000):'</span> <span class=\\\"token string\\\">' pass'</span>\\n<span class=\\\"token comment\\\"># 100 loops, best of 3: 11.1 msec per loop</span></code></pre>\\n      </div>\\n<p>但在python3</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">python -m timeit <span class=\\\"token string\\\">'for i in range(1000000):'</span> <span class=\\\"token string\\\">' pass'</span>\\n<span class=\\\"token comment\\\"># 10 loops, best of 3: 24.1 msec per loop</span></code></pre>\\n      </div>\\n<p>這就跟complier有關了</p>\\n<p>另外python3 range跟enumerate比較，range速度快一點，大概是因為enumerate有key跟value</p>\\n<p>但是如果是同時要idx value還是enumerate快點?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">test <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># only take value</span>\\n<span class=\\\"token comment\\\"># 2.674504293128848</span>\\n<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> test<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># get idx and value</span>\\n<span class=\\\"token comment\\\"># 6.778496273094788</span>\\n<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># get key</span>\\n<span class=\\\"token comment\\\"># 3.3357064370065928</span>\\n<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># get idx and value</span>\\n<span class=\\\"token comment\\\"># 5.7636028518900275</span>\\n<span class=\\\"token keyword\\\">for</span> k<span class=\\\"token punctuation\\\">,</span> v <span class=\\\"token keyword\\\">in</span> enumreate<span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>刷leetcode的時候，重要的是complexity，剩下的是減少判斷</p>\\n<p>至於while比for loop慢請看<a href=\\\"https://stackoverflow.com/questions/869229/why-is-looping-over-range-in-python-faster-than-using-a-while-loop\\\">這</a></p>\"}},{\"node\":{\"fields\":{\"slug\":\"/posts/python/\"},\"frontmatter\":{\"title\":\"python 小雜記\",\"date\":\"2019-03-30T11:49\",\"tags\":[\"python\",\"雜\"],\"release\":true},\"html\":\"<snippet>\\n  不好寫成一篇的就放這，可能大部份是刷leetcode的時候想的。\\n</snippet>\\n<h3>list pop</h3>\\n<ul>\\n<li>\\n<p>list.pop() without arguments O(1) (from the last)</p>\\n</li>\\n<li>\\n<p>list.pop() with arguments O(n) (need to reorganize list)</p>\\n</li>\\n</ul>\"}},{\"node\":{\"fields\":{\"slug\":\"/posts/ansi-unicode/\"},\"frontmatter\":{\"title\":\"ansi unicode 簡略記\",\"date\":\"2019-03-10T16:54\",\"tags\":[\"雜\"],\"release\":true},\"html\":\"<snippet>\\n  網路上這個議題寫到爛掉了，我寫這個只是因為一直遇到問題。\\n  反正都會說utf-8就對了，真正遇到問題也不知道解就對了。\\n  <br/>\\n  <br/>\\n  所以我寫一篇給我自己有點印象。\\n</snippet>\\n<p>ansi</p>\\n<p>早期的電腦只能表示256種符號，但是每個國家字都這麼多，所以有些國家將兩個字母合併來代表一個字母，big5, gbk, jis，皆是這樣。</p>\\n<p>但是每個國家都搞一套，第一有可能會有重覆的字，第二，在看文章的時候需要知道編碼，而且電腦裡面要裝編碼。</p>\\n<p>這實在是太蠢了，所以之後就發明了unicode。</p>\\n<p>unicode</p>\\n<p>常聽到的是萬國碼，但其實叫統一碼比較精確。為了防止上面的事情不斷發生，所以統一大家的文字，通通記成一套。</p>\\n<p>utf16\\nwindows常用的編碼方式，所有的文字都是兩個bytes，像是從powershell跑出來的檔案，預設都是utf16。</p>\\n<p>utf8\\n變動字元，英文為一個bytes，中文通常為三個bytes，最多可以用四個bytes去記錄字元。</p>\\n<p>以速度來說，utf16 > utf8 (固定字元解析比較快)，以儲存來說，英文夠多 utf8 > utf 16，網路世界重傳輸速度，所以utf8較為受歡迎。</p>\\n<p>所以寫網頁用utf8，寫應用程式用utf16。</p>\\n<p>至於有時候，windows檔案會出現的bom就是在記錄這個檔案是哪個編碼，但for more general use，還是使用不帶bom的編輯器吧。</p>\\n<p>另外有時候，linux的cli或是vim會出現亂碼，如果在某些情況能看到正常的檔案(例如cat file)，這就看情況自己解吧(std out格式問題)。</p>\\n<p>通常是啟aws的機器沒特別設定，就降。</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/posts/python-requests-utf8/\"},\"frontmatter\":{\"title\":\"python request post(上傳) utf-8問題\",\"date\":\"2019-03-10T16:44\",\"tags\":[\"python\"],\"release\":true},\"html\":\"<snippet>\\n  不知道多久沒有玩前端了，教練我想研究react hook啊...\\n  現在我的前端實在是無用舞之地，來記錄一些工作上遇到的事情吧。\\n  這邊要描述的是python requests(post) multipart/form-data的問題。\\n</snippet>\\n<p>公司需要大量轉移檔案，於是我們寫了一隻小程式去爬清單，然後將資料從一個網頁下載上傳至另一個網頁。</p>\\n<p>一開始測試都很ok，直到我們遇到了一個使用日文名稱的檔案。</p>\\n<p>在交叉測試之後，下載那邊是沒有問題的，我們使用linux，雖然在command line看到的檔名是亂碼，但是不影響實際上使用。</p>\\n<p>上傳則是一直 http code 500，訊息也只有internal server error。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> requests\\nrequests<span class=\\\"token punctuation\\\">.</span>post<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">,</span> headers<span class=\\\"token operator\\\">=</span>headers<span class=\\\"token punctuation\\\">,</span> files<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'file'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'日文.zip'</span><span class=\\\"token punctuation\\\">,</span> ByteIO<span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>我的直覺就是檔名的問題(公司有很多日文檔案，每次都被婊)，於是上網google了一下。</p>\\n<p>看到了<a href=\\\"https://stackoverflow.com/questions/28282318/how-to-do-multi-part-upload-with-python-requests-library-and-unicode-filename/28283207\\\">這篇</a></p>\\n<p>然後點進去了他的blog看了一下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># coding: utf8</span>\\n<span class=\\\"token keyword\\\">import</span> requests\\n<span class=\\\"token keyword\\\">import</span> re\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">rewrite_request</span><span class=\\\"token punctuation\\\">(</span>prepared_request<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    filename <span class=\\\"token operator\\\">=</span> u<span class=\\\"token string\\\">'tête-à-tête.txt'</span><span class=\\\"token punctuation\\\">.</span>encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span>\\n    prepared_request<span class=\\\"token punctuation\\\">.</span>body <span class=\\\"token operator\\\">=</span> re<span class=\\\"token punctuation\\\">.</span>sub<span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token string\\\">'filename\\\\*=.*'</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token string\\\">'filename='</span> <span class=\\\"token operator\\\">+</span> filename<span class=\\\"token punctuation\\\">,</span> prepared_request<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> prepared_request\\n\\nrequests<span class=\\\"token punctuation\\\">.</span>post<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://localhost/upload.php'</span><span class=\\\"token punctuation\\\">,</span> files<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'fieldname'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>u<span class=\\\"token string\\\">'tête-à-tête.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'some contents'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> auth<span class=\\\"token operator\\\">=</span>rewrite_request<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>我實際跑了一下，發現什麼都沒做的request.post，body的filename吃到utf-8檔名確實會自動消失，上傳沒有檔名的檔案當然會爆炸。</p>\\n<p>不過blog的解法是一個醜醜的workaround，於是我研究了一下preparerequest自己寫了一個</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> requests\\ns <span class=\\\"token operator\\\">=</span> requests<span class=\\\"token punctuation\\\">.</span>Session<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nprepped <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>prepare_request<span class=\\\"token punctuation\\\">(</span>requests<span class=\\\"token punctuation\\\">.</span>Request<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'POST'</span><span class=\\\"token punctuation\\\">,</span> url<span class=\\\"token punctuation\\\">,</span>\\n    headers<span class=\\\"token operator\\\">=</span>headers<span class=\\\"token punctuation\\\">,</span> files<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'file'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'IWLLREPLACETHIS'</span><span class=\\\"token punctuation\\\">,</span>io<span class=\\\"token punctuation\\\">.</span>BytesIO<span class=\\\"token punctuation\\\">(</span>attachment_file<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\nprepped<span class=\\\"token punctuation\\\">.</span>body <span class=\\\"token operator\\\">=</span> re<span class=\\\"token punctuation\\\">.</span>sub<span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token string\\\">'IWLLREPLACETHIS'</span><span class=\\\"token punctuation\\\">,</span> attachment_name<span class=\\\"token punctuation\\\">.</span>encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> prepped<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">)</span>\\n\\nprepped<span class=\\\"token punctuation\\\">.</span>headers<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'content-length'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>prepped<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">)</span>\\n\\nsettings <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>merge_environment_settings<span class=\\\"token punctuation\\\">(</span>prepped<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">)</span>\\nr <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>send<span class=\\\"token punctuation\\\">(</span>prepped<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">**</span>settings<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'timeout'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>我先塞了一個簡易但不容易重複的字串在filename裡，然後直接取代字串。</p>\\n<p>另外需要更新headers的content-length，replace body裡面的filename會改變整個body的size，像在我們的api上傳檔案會檢查content-length與body size是否一致，若是不修正一樣是跳internal server error。</p>\\n<p>這個小問題卡了我1-2個小時檢查，2-3個小時測試+寫code，最後又卡1小時在content-length</p>\\n<p>寫到這裡，一切都是requests裡的Urllib3的錯!!!!(python2的版本好像是好的)\\n<br/>\\n<br/>\\n<br/>\\n<br/></p>\\n<p>來追根究底一下</p>\\n<p>嗯....看了很久 看不太懂，我說說我的想法</p>\\n<p>Urllib3的filename是吃rfc2231 spec的，長出來應該是這樣filename*=UTF-8''name(但我記得我自己實測name是空的)</p>\\n<p>但是html 5在multipart/form-data有自己的spec，不支援2231 spec，所以不管怎樣都沒用</p>\\n<p>在github上已經討論了很久，也有人開了pr，不過urllib3不是只寫給html的，算是一個big change，所以一直沒有merge</p>\\n<p>網路上如果google python 上傳 中文，應該是一堆文章，但不要跟那些文章一樣去改requests的source code啊</p>\\n<p>太暴力了XDDDDD</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/posts/webpack-manifest-n-chunk/\"},\"frontmatter\":{\"title\":\"webpack production part 下(chunk & manifest)\",\"date\":\"2018-10-14T16:56\",\"tags\":[\"webpack\"],\"release\":true},\"html\":\"<snippet>\\n  此篇為雜記，我想到啥就記啥。主要的話會跟js caching有關\\n  此篇webpack為4.x version\\n</snippet>\\n<p>在前端領域中，bundle是很重要的，dev build跟production build大小，我舉例手上的專案，9mb -> 3xx kb(gzip)。</p>\\n<p>關於檔案大小的部份不在此介紹中。這應該是比較簡單的part，只要你mode有開prodction應該就差很多了。\\n(好吧 我想寫caching 上集晚點補)</p>\\n<p>靜態檔案cache是一個很重要的機制，cache的好，使用者不用每次進網頁都載一次檔案。這點在前端蠻容易被忽略的(至少對於我本人)。在本地端開發的時候很少會感受到file size的影響，上了production習慣開dev tool + disable cached。</p>\\n<p>cache通常會提到server設定，不過我們這邊要提的如何讓webpack做long term cache</p>\\n<p>首先要知道的就是一般使用webpack output file會長這樣</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'[name].[chunkhash].js'</span><span class=\\\"token punctuation\\\">,</span>\\n  path<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'../dist'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<br/>\\n<p><strong>為什麼要加hash</strong></p>\\n<p>基於正常使用者不會每次進入頁面都clean cached，若是今天線上版的foo.js要更新</p>\\n<p>client端看到foo.js名稱一樣使用舊的cache，後果不堪設想。(頁面極度容易掛掉)</p>\\n<p>所以每次build的時候依據檔案的內容產生不一樣的的md5加在後面，client端看到不一樣的檔案名稱就會抓取新的檔案</p>\\n<p>為啥不用 static.file?v=xx.xx.xx 可以看參考</p>\\n<p>好解法=使用hash file name 先佈static file再佈頁面</p>\\n<p>這是如果有使用cdn之類的功能的話，如果是docker一起丟file+html是沒差的</p>\\n<p>請視狀況而定</p>\\n<p>long term caching講的是如何在每次佈版的時候，只針對最少的js改動(其他保留不變)</p>\\n<br />\\n<h3>hash &#x26;&#x26; chunkhash</h3>\\n<p>了解這兩個的差異是開始的第一步</p>\\n<p>不過自行了解一下code splitting(我好像沒介紹)</p>\\n<p>對於hash，計算所有chunks的hash，也就是所有檔案後面接的hash會一樣</p>\\n<p>對於chunkhash，每個chunk單獨計算hash</p>\\n<blockquote>\\n<p>不用在dev放上hash，會增加build的時間</p>\\n</blockquote>\\n<p>我們希望當只有一個檔案更新的時候使用者只需要抓一個檔案，想當然要用chunkhash</p>\\n<p>至於有使用ExtractTextPlugin的人可以google一下content-hash</p>\\n<p>因為我們在新的專案使用styled components所以沒有這個問題</p>\\n<p><br/><br/></p>\\n<p>這麼簡單的結束了嗎(X)</p>\\n<p>實際在做旳時候，就算是某檔案完全沒更動也是換了hash value。</p>\\n<p>上網查了後，我們還需要了解manifest與runtime</p>\\n<h4>runtime</h4>\\n<p>webpack在連接所有的code與module相依時(js load完了沒，這module需要啥其他module)，會需要一段code來做這些事情，而這段code就稱之runtime</p>\\n<h4>manifest</h4>\\n<p>當你寫著import, require，compile之後會變成webpack的module，在code裡面常常看到樣的code</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">__webpack_require__</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// &lt;&lt;&lt; id</span></code></pre>\\n      </div>\\n<p>而什麼module對應什麼id這些就是manifest做的</p>\\n<p>當你新增或刪除module, module排列的id會變動，這些東西寫在chunk裡面每次就需要rebuild。</p>\\n<p>在webpack4中，可以設置runChunk: true，會將runtime與manifest拉出來(each entry has a runtime)</p>\\n<p>這樣可以確保剩下的code之中不會挾雜其他\\b的module id</p>\\n<blockquote>\\n<p>webpack 4.x 沒有 CommonsChunkPlugin</p>\\n</blockquote>\\n<br />\\n<p>另外對於manifest，拉出來還不夠看。</p>\\n<p>webpack預設module是name by id(integer)</p>\\n<p>假設現在有 1 , 2 , 3, ,4 ,5 module</p>\\n<p>插入了新的module被歸類在3</p>\\n<p>1不變, 2不變, 3 new, 4 -> original 3, 5 -> original 4, 6, -> original 5</p>\\n<p>這樣子就rebuild了original 3, 4, 5</p>\\n<p>所以我們還會引入NamedModulesPlugin, HashedModuleIdsPlugin</p>\\n<p>一樣是用內容轉成hash，就算上述的事情發生，只需要build new or modified module and rebuild runtimeChunk使用者也不用重新loading file</p>\\n<br/>\\n<p>最後的配置(簡單的)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'[name].[chunkhash].js'</span><span class=\\\"token punctuation\\\">,</span>\\n  path<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'../dist'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\noptimization<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  runtimeChunk<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// this line</span>\\n  splitChunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'async'</span><span class=\\\"token punctuation\\\">,</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    cacheGroups<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// can do more if you have complex SPA</span>\\n      vendors<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/[\\\\\\\\/]node_modules[\\\\\\\\/]/</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'vendors'</span><span class=\\\"token punctuation\\\">,</span>\\n        chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'all'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      components<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/[\\\\\\\\/]components[\\\\\\\\/]/</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'components'</span><span class=\\\"token punctuation\\\">,</span>\\n        chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'all'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\nplugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>HashedModuleIdsPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// this line</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>想知道更深的進去參考挖吧</p>\\n<p><a href=\\\"https://www.zhihu.com/question/20790576/answer/32602154\\\">參考1 非常有用</a></p>\\n<p><a href=\\\"https://github.com/pigcan/blog/issues/9\\\">參考2 非常有用</a></p>\"}}]}},\"pathContext\":{\"offset\":0,\"paginations\":6,\"total\":31}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---index-a3697f7d56ff29f41e3f.js","module.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/posts/locale-linux/\"},\"frontmatter\":{\"title\":\"locale in linux\",\"date\":\"2019-04-13T14:54\",\"tags\":[\"雜\"],\"release\":true},\"html\":\"<snippet>\\n<p>只速記一下，工作時遇到的aws機器上utf-8檔名的問題(每次遇到都花很多時間處理)</p>\\n</snippet>\\n<p>遇到的問題是要從windows將utf8(中文)的檔案與資料夾搬到aws的機器上用python3進行處理</p>\\n<p>我們會先將資料zip起來在搬過去(太多也太大)</p>\\n<p>總共會連續遇到幾個問題</p>\\n<ol>\\n<li>unzip的問題</li>\\n</ol>\\n<p>在windows使用內建的zip，格式好像是用utf16儲存檔名(未驗證)</p>\\n<p>解法: 使用7zip, winrar.....等</p>\\n<p>2\\b. 檔案在linux顯示的問題</p>\\n<p>如果上一步是正確的utf8，解壓縮後在cli下ls還是會看到一堆問號</p>\\n<p>但是如果將檔案move回mac上是正常顯示的<br/>\\n(我記得utf16好像也是正常顯示，mac威能)</p>\\n<ol start=\\\"3\\\">\\n<li>python中顯示的問題</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> os\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>os<span class=\\\"token punctuation\\\">.</span>listdir<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>得到了類似unicode的編碼，我沒有截圖</p>\\n<p>但這串code是str且轉不回unicode(每個字有三個bytes) 我沒有特別去研究這編碼</p>\\n<p>做了超久的嘗試，最後在網路上找到了LC<em>ALL, LC</em>CTYPE, LANG等linux locale參數</p>\\n<p>死馬當活馬醫，設LC<em>ALL=en</em>US.UTF-8</p>\\n<p>linux下 ls就顯示正常，然後進了python也顯示正常了!!!!!!</p>\\n<p>locale就是像windows的地區一樣，設置系統用的語言環境</p>\\n<p>一般沒設的話應該就是C(sytem default，但這default到底是什麼?)</p>\\n<p>設成en_US.UTF-8後，理所當然ls應該是會改變的，但python為什麼會變呢</p>\\n<p>研究以後發現python的listdir, open,.....的實作是用C語言的(我指的是cpython compiler，一般人裝的都是這個)</p>\\n<p>而在讀值的時候就會吃環境變數(但是像file.read就能指定encoding)</p>\\n<p>所以修改了LC_ALL不只std out的format，連python code也能正常顯示listdir囉</p>\\n<p>至於LC_ALL LC_CTYPE LANG就想成LC_ALL > LC_CTYPE > LANG，上位的設置以後下面的就失效了</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/posts/python-for-loop/\"},\"frontmatter\":{\"title\":\"python for loop比較\",\"date\":\"2019-03-30T11:53\",\"tags\":[\"python\"],\"release\":true},\"html\":\"<p>range 直接回傳list</p>\\n<p>range(start, stop[, step]) 到stop結束，但不包含stop</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">length <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">#假設是5</span>\\n\\n<span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> length<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\"># [0,1,2,3,4]</span>\\n\\n<span class=\\\"token comment\\\"># 反過來就要</span>\\n<span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span>length<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\"># [4,3,2,1,0]</span></code></pre>\\n      </div>\\n<p>xrange是generator</p>\\n<p>一次只回傳一個</p>\\n<p>for loop的話xrange會比range效能好，因為xrange不用allocate array</p>\\n<p>目前python3的range就是python2的xrange</p>\\n<p>如果要return list就要</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token builtin\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">xrange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>實測python2</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">python -m timeit <span class=\\\"token string\\\">'for i in range(1000000):'</span> <span class=\\\"token string\\\">' pass'</span>\\n<span class=\\\"token comment\\\"># 10 loops, best of 3: 18.5 msec per loop</span>\\npython -m timeit <span class=\\\"token string\\\">'for i in xrange(1000000):'</span> <span class=\\\"token string\\\">' pass'</span>\\n<span class=\\\"token comment\\\"># 100 loops, best of 3: 11.1 msec per loop</span></code></pre>\\n      </div>\\n<p>但在python3</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">python -m timeit <span class=\\\"token string\\\">'for i in range(1000000):'</span> <span class=\\\"token string\\\">' pass'</span>\\n<span class=\\\"token comment\\\"># 10 loops, best of 3: 24.1 msec per loop</span></code></pre>\\n      </div>\\n<p>這就跟complier有關了</p>\\n<p>另外python3 range跟enumerate比較，range速度快一點，大概是因為enumerate有key跟value</p>\\n<p>但是如果是同時要idx value還是enumerate快點?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">test <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">list</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># only take value</span>\\n<span class=\\\"token comment\\\"># 2.674504293128848</span>\\n<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> test<span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># get idx and value</span>\\n<span class=\\\"token comment\\\"># 6.778496273094788</span>\\n<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># get key</span>\\n<span class=\\\"token comment\\\"># 3.3357064370065928</span>\\n<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># get idx and value</span>\\n<span class=\\\"token comment\\\"># 5.7636028518900275</span>\\n<span class=\\\"token keyword\\\">for</span> k<span class=\\\"token punctuation\\\">,</span> v <span class=\\\"token keyword\\\">in</span> enumreate<span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>刷leetcode的時候，重要的是complexity，剩下的是減少判斷</p>\\n<p>至於while比for loop慢請看<a href=\\\"https://stackoverflow.com/questions/869229/why-is-looping-over-range-in-python-faster-than-using-a-while-loop\\\">這</a></p>\"}},{\"node\":{\"fields\":{\"slug\":\"/posts/python/\"},\"frontmatter\":{\"title\":\"python 小雜記\",\"date\":\"2019-03-30T11:49\",\"tags\":[\"python\",\"雜\"],\"release\":true},\"html\":\"<snippet>\\n  不好寫成一篇的就放這，可能大部份是刷leetcode的時候想的。\\n</snippet>\\n<h3>list pop</h3>\\n<ul>\\n<li>\\n<p>list.pop() without arguments O(1) (from the last)</p>\\n</li>\\n<li>\\n<p>list.pop() with arguments O(n) (need to reorganize list)</p>\\n</li>\\n</ul>\"}},{\"node\":{\"fields\":{\"slug\":\"/posts/ansi-unicode/\"},\"frontmatter\":{\"title\":\"ansi unicode 簡略記\",\"date\":\"2019-03-10T16:54\",\"tags\":[\"雜\"],\"release\":true},\"html\":\"<snippet>\\n  網路上這個議題寫到爛掉了，我寫這個只是因為一直遇到問題。\\n  反正都會說utf-8就對了，真正遇到問題也不知道解就對了。\\n  <br/>\\n  <br/>\\n  所以我寫一篇給我自己有點印象。\\n</snippet>\\n<p>ansi</p>\\n<p>早期的電腦只能表示256種符號，但是每個國家字都這麼多，所以有些國家將兩個字母合併來代表一個字母，big5, gbk, jis，皆是這樣。</p>\\n<p>但是每個國家都搞一套，第一有可能會有重覆的字，第二，在看文章的時候需要知道編碼，而且電腦裡面要裝編碼。</p>\\n<p>這實在是太蠢了，所以之後就發明了unicode。</p>\\n<p>unicode</p>\\n<p>常聽到的是萬國碼，但其實叫統一碼比較精確。為了防止上面的事情不斷發生，所以統一大家的文字，通通記成一套。</p>\\n<p>utf16\\nwindows常用的編碼方式，所有的文字都是兩個bytes，像是從powershell跑出來的檔案，預設都是utf16。</p>\\n<p>utf8\\n變動字元，英文為一個bytes，中文通常為三個bytes，最多可以用四個bytes去記錄字元。</p>\\n<p>以速度來說，utf16 > utf8 (固定字元解析比較快)，以儲存來說，英文夠多 utf8 > utf 16，網路世界重傳輸速度，所以utf8較為受歡迎。</p>\\n<p>所以寫網頁用utf8，寫應用程式用utf16。</p>\\n<p>至於有時候，windows檔案會出現的bom就是在記錄這個檔案是哪個編碼，但for more general use，還是使用不帶bom的編輯器吧。</p>\\n<p>另外有時候，linux的cli或是vim會出現亂碼，如果在某些情況能看到正常的檔案(例如cat file)，這就看情況自己解吧(std out格式問題)。</p>\\n<p>通常是啟aws的機器沒特別設定，就降。</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/posts/python-requests-utf8/\"},\"frontmatter\":{\"title\":\"python request post(上傳) utf-8問題\",\"date\":\"2019-03-10T16:44\",\"tags\":[\"python\"],\"release\":true},\"html\":\"<snippet>\\n  不知道多久沒有玩前端了，教練我想研究react hook啊...\\n  現在我的前端實在是無用舞之地，來記錄一些工作上遇到的事情吧。\\n  這邊要描述的是python requests(post) multipart/form-data的問題。\\n</snippet>\\n<p>公司需要大量轉移檔案，於是我們寫了一隻小程式去爬清單，然後將資料從一個網頁下載上傳至另一個網頁。</p>\\n<p>一開始測試都很ok，直到我們遇到了一個使用日文名稱的檔案。</p>\\n<p>在交叉測試之後，下載那邊是沒有問題的，我們使用linux，雖然在command line看到的檔名是亂碼，但是不影響實際上使用。</p>\\n<p>上傳則是一直 http code 500，訊息也只有internal server error。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> requests\\nrequests<span class=\\\"token punctuation\\\">.</span>post<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'url'</span><span class=\\\"token punctuation\\\">,</span> headers<span class=\\\"token operator\\\">=</span>headers<span class=\\\"token punctuation\\\">,</span> files<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'file'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'日文.zip'</span><span class=\\\"token punctuation\\\">,</span> ByteIO<span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>我的直覺就是檔名的問題(公司有很多日文檔案，每次都被婊)，於是上網google了一下。</p>\\n<p>看到了<a href=\\\"https://stackoverflow.com/questions/28282318/how-to-do-multi-part-upload-with-python-requests-library-and-unicode-filename/28283207\\\">這篇</a></p>\\n<p>然後點進去了他的blog看了一下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># coding: utf8</span>\\n<span class=\\\"token keyword\\\">import</span> requests\\n<span class=\\\"token keyword\\\">import</span> re\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">rewrite_request</span><span class=\\\"token punctuation\\\">(</span>prepared_request<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    filename <span class=\\\"token operator\\\">=</span> u<span class=\\\"token string\\\">'tête-à-tête.txt'</span><span class=\\\"token punctuation\\\">.</span>encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span>\\n    prepared_request<span class=\\\"token punctuation\\\">.</span>body <span class=\\\"token operator\\\">=</span> re<span class=\\\"token punctuation\\\">.</span>sub<span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token string\\\">'filename\\\\*=.*'</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token string\\\">'filename='</span> <span class=\\\"token operator\\\">+</span> filename<span class=\\\"token punctuation\\\">,</span> prepared_request<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> prepared_request\\n\\nrequests<span class=\\\"token punctuation\\\">.</span>post<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://localhost/upload.php'</span><span class=\\\"token punctuation\\\">,</span> files<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'fieldname'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>u<span class=\\\"token string\\\">'tête-à-tête.txt'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'some contents'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> auth<span class=\\\"token operator\\\">=</span>rewrite_request<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>我實際跑了一下，發現什麼都沒做的request.post，body的filename吃到utf-8檔名確實會自動消失，上傳沒有檔名的檔案當然會爆炸。</p>\\n<p>不過blog的解法是一個醜醜的workaround，於是我研究了一下preparerequest自己寫了一個</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> requests\\ns <span class=\\\"token operator\\\">=</span> requests<span class=\\\"token punctuation\\\">.</span>Session<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nprepped <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>prepare_request<span class=\\\"token punctuation\\\">(</span>requests<span class=\\\"token punctuation\\\">.</span>Request<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'POST'</span><span class=\\\"token punctuation\\\">,</span> url<span class=\\\"token punctuation\\\">,</span>\\n    headers<span class=\\\"token operator\\\">=</span>headers<span class=\\\"token punctuation\\\">,</span> files<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'file'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'IWLLREPLACETHIS'</span><span class=\\\"token punctuation\\\">,</span>io<span class=\\\"token punctuation\\\">.</span>BytesIO<span class=\\\"token punctuation\\\">(</span>attachment_file<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\nprepped<span class=\\\"token punctuation\\\">.</span>body <span class=\\\"token operator\\\">=</span> re<span class=\\\"token punctuation\\\">.</span>sub<span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token string\\\">'IWLLREPLACETHIS'</span><span class=\\\"token punctuation\\\">,</span> attachment_name<span class=\\\"token punctuation\\\">.</span>encode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'utf-8'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> prepped<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">)</span>\\n\\nprepped<span class=\\\"token punctuation\\\">.</span>headers<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'content-length'</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>prepped<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">)</span>\\n\\nsettings <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>merge_environment_settings<span class=\\\"token punctuation\\\">(</span>prepped<span class=\\\"token punctuation\\\">.</span>url<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">)</span>\\nr <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span>send<span class=\\\"token punctuation\\\">(</span>prepped<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">**</span>settings<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'timeout'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>我先塞了一個簡易但不容易重複的字串在filename裡，然後直接取代字串。</p>\\n<p>另外需要更新headers的content-length，replace body裡面的filename會改變整個body的size，像在我們的api上傳檔案會檢查content-length與body size是否一致，若是不修正一樣是跳internal server error。</p>\\n<p>這個小問題卡了我1-2個小時檢查，2-3個小時測試+寫code，最後又卡1小時在content-length</p>\\n<p>寫到這裡，一切都是requests裡的Urllib3的錯!!!!(python2的版本好像是好的)\\n<br/>\\n<br/>\\n<br/>\\n<br/></p>\\n<p>來追根究底一下</p>\\n<p>嗯....看了很久 看不太懂，我說說我的想法</p>\\n<p>Urllib3的filename是吃rfc2231 spec的，長出來應該是這樣filename*=UTF-8''name(但我記得我自己實測name是空的)</p>\\n<p>但是html 5在multipart/form-data有自己的spec，不支援2231 spec，所以不管怎樣都沒用</p>\\n<p>在github上已經討論了很久，也有人開了pr，不過urllib3不是只寫給html的，算是一個big change，所以一直沒有merge</p>\\n<p>網路上如果google python 上傳 中文，應該是一堆文章，但不要跟那些文章一樣去改requests的source code啊</p>\\n<p>太暴力了XDDDDD</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/posts/webpack-manifest-n-chunk/\"},\"frontmatter\":{\"title\":\"webpack production part 下(chunk & manifest)\",\"date\":\"2018-10-14T16:56\",\"tags\":[\"webpack\"],\"release\":true},\"html\":\"<snippet>\\n  此篇為雜記，我想到啥就記啥。主要的話會跟js caching有關\\n  此篇webpack為4.x version\\n</snippet>\\n<p>在前端領域中，bundle是很重要的，dev build跟production build大小，我舉例手上的專案，9mb -> 3xx kb(gzip)。</p>\\n<p>關於檔案大小的部份不在此介紹中。這應該是比較簡單的part，只要你mode有開prodction應該就差很多了。\\n(好吧 我想寫caching 上集晚點補)</p>\\n<p>靜態檔案cache是一個很重要的機制，cache的好，使用者不用每次進網頁都載一次檔案。這點在前端蠻容易被忽略的(至少對於我本人)。在本地端開發的時候很少會感受到file size的影響，上了production習慣開dev tool + disable cached。</p>\\n<p>cache通常會提到server設定，不過我們這邊要提的如何讓webpack做long term cache</p>\\n<p>首先要知道的就是一般使用webpack output file會長這樣</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'[name].[chunkhash].js'</span><span class=\\\"token punctuation\\\">,</span>\\n  path<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'../dist'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<br/>\\n<p><strong>為什麼要加hash</strong></p>\\n<p>基於正常使用者不會每次進入頁面都clean cached，若是今天線上版的foo.js要更新</p>\\n<p>client端看到foo.js名稱一樣使用舊的cache，後果不堪設想。(頁面極度容易掛掉)</p>\\n<p>所以每次build的時候依據檔案的內容產生不一樣的的md5加在後面，client端看到不一樣的檔案名稱就會抓取新的檔案</p>\\n<p>為啥不用 static.file?v=xx.xx.xx 可以看參考</p>\\n<p>好解法=使用hash file name 先佈static file再佈頁面</p>\\n<p>這是如果有使用cdn之類的功能的話，如果是docker一起丟file+html是沒差的</p>\\n<p>請視狀況而定</p>\\n<p>long term caching講的是如何在每次佈版的時候，只針對最少的js改動(其他保留不變)</p>\\n<br />\\n<h3>hash &#x26;&#x26; chunkhash</h3>\\n<p>了解這兩個的差異是開始的第一步</p>\\n<p>不過自行了解一下code splitting(我好像沒介紹)</p>\\n<p>對於hash，計算所有chunks的hash，也就是所有檔案後面接的hash會一樣</p>\\n<p>對於chunkhash，每個chunk單獨計算hash</p>\\n<blockquote>\\n<p>不用在dev放上hash，會增加build的時間</p>\\n</blockquote>\\n<p>我們希望當只有一個檔案更新的時候使用者只需要抓一個檔案，想當然要用chunkhash</p>\\n<p>至於有使用ExtractTextPlugin的人可以google一下content-hash</p>\\n<p>因為我們在新的專案使用styled components所以沒有這個問題</p>\\n<p><br/><br/></p>\\n<p>這麼簡單的結束了嗎(X)</p>\\n<p>實際在做旳時候，就算是某檔案完全沒更動也是換了hash value。</p>\\n<p>上網查了後，我們還需要了解manifest與runtime</p>\\n<h4>runtime</h4>\\n<p>webpack在連接所有的code與module相依時(js load完了沒，這module需要啥其他module)，會需要一段code來做這些事情，而這段code就稱之runtime</p>\\n<h4>manifest</h4>\\n<p>當你寫著import, require，compile之後會變成webpack的module，在code裡面常常看到樣的code</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">__webpack_require__</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// &lt;&lt;&lt; id</span></code></pre>\\n      </div>\\n<p>而什麼module對應什麼id這些就是manifest做的</p>\\n<p>當你新增或刪除module, module排列的id會變動，這些東西寫在chunk裡面每次就需要rebuild。</p>\\n<p>在webpack4中，可以設置runChunk: true，會將runtime與manifest拉出來(each entry has a runtime)</p>\\n<p>這樣可以確保剩下的code之中不會挾雜其他\\b的module id</p>\\n<blockquote>\\n<p>webpack 4.x 沒有 CommonsChunkPlugin</p>\\n</blockquote>\\n<br />\\n<p>另外對於manifest，拉出來還不夠看。</p>\\n<p>webpack預設module是name by id(integer)</p>\\n<p>假設現在有 1 , 2 , 3, ,4 ,5 module</p>\\n<p>插入了新的module被歸類在3</p>\\n<p>1不變, 2不變, 3 new, 4 -> original 3, 5 -> original 4, 6, -> original 5</p>\\n<p>這樣子就rebuild了original 3, 4, 5</p>\\n<p>所以我們還會引入NamedModulesPlugin, HashedModuleIdsPlugin</p>\\n<p>一樣是用內容轉成hash，就算上述的事情發生，只需要build new or modified module and rebuild runtimeChunk使用者也不用重新loading file</p>\\n<br/>\\n<p>最後的配置(簡單的)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'[name].[chunkhash].js'</span><span class=\\\"token punctuation\\\">,</span>\\n  path<span class=\\\"token punctuation\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'../dist'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\noptimization<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  runtimeChunk<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token comment\\\">// this line</span>\\n  splitChunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'async'</span><span class=\\\"token punctuation\\\">,</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    cacheGroups<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// can do more if you have complex SPA</span>\\n      vendors<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/[\\\\\\\\/]node_modules[\\\\\\\\/]/</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'vendors'</span><span class=\\\"token punctuation\\\">,</span>\\n        chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'all'</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      components<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/[\\\\\\\\/]components[\\\\\\\\/]/</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'components'</span><span class=\\\"token punctuation\\\">,</span>\\n        chunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'all'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\nplugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">webpack<span class=\\\"token punctuation\\\">.</span>HashedModuleIdsPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// this line</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span></code></pre>\\n      </div>\\n<p>想知道更深的進去參考挖吧</p>\\n<p><a href=\\\"https://www.zhihu.com/question/20790576/answer/32602154\\\">參考1 非常有用</a></p>\\n<p><a href=\\\"https://github.com/pigcan/blog/issues/9\\\">參考2 非常有用</a></p>\"}}]}},\"pathContext\":{\"offset\":0,\"paginations\":6,\"total\":31}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/index.json\n// module id = 459\n// module chunks = 142629428675168"],"sourceRoot":""}
webpackJsonp([0x910f76268da6],{"./node_modules/json-loader/index.js!./.cache/json/posts-javascript-event-loop.json":function(n,a){n.exports={data:{site:{siteMetadata:{title:"前端小誌",author:"Ernie Yang"}},markdownRemark:{id:"/Users/ernieyang09/Desktop/workspace/gatsby-blog/src/pages/posts/2018/03/0325--javascript-event-loop.md absPath of file >>> MarkdownRemark",html:'<snippet>\n  這邊試著整理一些javscript的context概念(教練我原本只想寫event loop啊，越寫越多orz...)\n</snippet>\n<p>先說說js function，在w3c的\b<a href="https://www.w3schools.com/js/js_function_invocation.asp">定義</a>中，呼叫一個function稱為invoke。</p>\n<p>在看js文章與執行function的時候當會看到一個字 - 執行環境(Execution Context)</p>\n<p>Execution Context就是執行javascript時候的環境(有講跟沒講一樣XD)，更準確的來說，上下文環境，確認執行時候的this, var, method...</p>\n<p>Execution Context有三種</p>\n<ol>\n<li>Gobal Execution Context - 一開始的地方，browser來說就是window</li>\n<li>Functional Execution Context - 執行function的地方</li>\n<li>Eval - 不常用</li>\n</ol>\n<p>scope的概念原本是用於context，但查了一下，let產生的block scope並不會產生新的context，所以在es6的block scope需要特別注意。</p>\n<p>當js invoke一個function時，會從global開始呼叫function，並且建立execution context，如果有很多function，就會一層疊一層的，此稱為execution context stack，而我們執行function的方式稱之為call stack。</p>\n<p>js建立execution context有兩個步驟</p>\n<ol>\n<li>建立階段</li>\n<li>執行階段</li>\n</ol>\n<h4>建立階段</h4>\n<ol>\n<li>建立activation object or the variable object\nvariable object指的是存放execution context scope data的物件，是一個抽象的概念，在不同的\bcontext裡面實作方式(存放的東西)是不一樣的。\n在global context中的variable object等同於自己，並且可以直接對變數引用，所以你能向下面一樣呼叫</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// directly, is found in VO(globalContext): "test"</span>\n\n<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// indirectly via global === VO(globalContext): "test"</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>\n</code></pre>\n      </div>\n<p>在function \bcontext中的VO稱之activation object，不能直接被引用，裡面要放入function arguments，context的var與function定義。</p>\n<ul>\n<li>\n<p>對於每一個var，js會幫AO create一個property with value undefined，如果存在property就略過。</p>\n</li>\n<li>\n<p>建立property for arg，把arguments object丟進去(reference)</p>\n</li>\n<li>\n<p>對於function，js會create一個function，然後create property by function name，然後將ref丟進去，如果存在property就覆蓋。</p>\n</li>\n<li>\n<p>建立scope chain\n想像成一個array或是list，將裡面塞入VO(包涵現在所在的) [bFunc VO, a FuncVO, Global VO]</p>\n</li>\n<li>\n<p>確認this的指向。</p>\n</li>\n</ul>\n<p>最後</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>executionContextObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    scopeChain<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* variableObject + all parent execution context\'s variableObject */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    variableObject<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* function arguments / parameters, inner variable and function declarations */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">this</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// example</span>\nFuncExecutionContextObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  activationbj<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      argumentObj <span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          <span class="token number">0</span><span class="token punctuation">:</span> e<span class="token punctuation">,</span>\n          length<span class="token punctuation">:</span><span class="token number">1</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      a<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n      b<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>\n      c<span class="token punctuation">:</span> undefined\n      Func<span class="token punctuation">:</span> Pointer to the Function definition<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  scopeChain<span class="token punctuation">:</span> <span class="token punctuation">[</span>Func variable object<span class="token punctuation">,</span> Global exection context variable object<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">:</span> value <span class="token keyword">of</span> <span class="token keyword">this</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h4>執行階段</h4>\n<p>從上逐步執行每一行code，若是跑到變數宣告才會賦值。</p>\n<p>不過這樣很容易解釋</p>\n<ol>\n<li>var hoisting，因為create stage就已經知道變數了</li>\n<li>var hoisting但呼叫var時為undefined，因為實際給值的動作可能在呼叫之後</li>\n<li>function hoisting但能呼叫，因為function的處理方式是不一樣的</li>\n<li>function expression與function declaration是不一樣的，function declaration視為var 宣告，在執行階段跑到變數宣告才會create function</li>\n</ol>\n<p>寫完文章才理解大家常常在說的上下文是"context"(翻了中英對照才知道...)，實作中比較常會遇到this的指向問題，這邊並沒有多做著磨，我們應該少使用一些反模式就可以大幅減少遇到問題的可能性，像多用es6 module與arrow function就是一種好的寫法(大部份的function不用dynamic this對吧)，有一些this太刁鑽了，想要的看<a href="https://halfrost.com/javascript_this/">這裡</a>。</p>',fields:{slug:"/posts/javascript-event-loop/"},frontmatter:{title:"Javascript context",date:"2018-03-25T19:49",tags:["mechanic"]}}},pathContext:{slug:"/posts/javascript-event-loop/"}}}});
//# sourceMappingURL=path---posts-javascript-event-loop-92dca2b3813516513bb9.js.map
{"version":3,"sources":["webpack:///path---posts-sass-signup-flow-b1bc62d9e77961802f01.js","webpack:///./.cache/json/posts-sass-signup-flow.json"],"names":["webpackJsonp","475","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","fields","slug","frontmatter","date","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,OAAAC,OAAA,eAAsCC,gBAAmBC,GAAA,wIAAAC,KAAA,quIAAAC,QAAo5IC,KAAA,4BAAkCC,aAAgBP,MAAA,8BAAAQ,KAAA,mBAAAC,MAAA,YAAmFC,aAAgBJ,KAAA","file":"path---posts-sass-signup-flow-b1bc62d9e77961802f01.js","sourcesContent":["webpackJsonp([237806451912131],{\n\n/***/ 475:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"前端小誌\",\"author\":\"Ernie Yang\"}},\"markdownRemark\":{\"id\":\"/Users/ernieyang09/Desktop/workspace/gatsby-blog/src/pages/posts/2017/08/0820--sass-signup-flow.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><snippet>譯: <a href=\\\"https://conversionxl.com/blog/saas-signup-flows/\\\">3 Common SaaS Sign-Up Flows (and a Friction-Based Analysis)</a></snippet></p>\\n<p>非心理系出身，若是有專有名詞翻錯，請指正。</p>\\n<p>摩擦</p>\\n<blockquote>\\n<p>當參訪者嘗試完成一個動作的時候所遇到的心理上的反抗，是轉換率殺手。</p>\\n</blockquote>\\n<p>你可以試著優化產品的價值主張與call to action buttons(行動按鈕)，但若是你的註冊流程包涵了太多的摩擦，你就會流失你的客戶。</p>\\n<p>減少摩擦就是最有效率增加轉換率的方式。然而，如果你只是胡亂猜測的話，是很難去辨識摩擦來源的。</p>\\n<p>摩擦會出現在網頁的各處，我們這邊只講註冊流程，也是通常摩擦最容易發生的地方。</p>\\n<h3>摩擦與註冊流程</h3>\\n<p>摩擦就是使用者必須要多精通註冊流程的測量。</p>\\n<p>雖然因為多樣性與客觀性很難去量化標準，但還是可以使用三種因子去做評估</p>\\n<ol>\\n<li>\\n<p>完成步驟 - 使用者會經過的一連串的頁面與步驟的數量。</p>\\n</li>\\n<li>\\n<p>資訊代價 - 使用者必須填寫的資訊數量。</p>\\n</li>\\n<li>\\n<p>付出投資 - 使用者必須做的決定與額外須要完成的活動。(像是email認証，CAPTCHA，其他...)</p>\\n</li>\\n</ol>\\n<p>這邊有幾種註冊流程的設計方式，他們各自有優缺點。但是最終的目的都是為了減少摩擦，最大價值化客戶與利潤。</p>\\n<h3>三種常見的註冊流程與如何減少摩擦</h3>\\n<p>雖然市面上有很多種註冊流程，通常可以分為以下三類，各自都有優缺點，當然也要考慮到你的產品與使用情境。\\n總而言之，這裡有三種常見的使用情境與評論。</p>\\n<ol>\\n<li>\\n<p>完整的流程後登入app</p>\\n<blockquote>\\n<p>註冊(Email+密碼) -> 帳號設置 -> Email確認 -> App</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>這差不多是現今最常見的註冊流程，使用者先將所有資訊填好，之後才能登入程式。</p>\\n<h4>這有什麼好處</h4>\\n<p>對於初始者非常熟悉此流程，人腦對於流程如何進行會先定義心智模型。所以當他們看到相關的模型，在認知上只須要花很少的力。因此我們對於這個流程就感到不錯。</p>\\n<p>另外一個主要的原因就是我們可以確保垃圾郵件發送者會盡可能的遠離我們的app。安全性十足。</p>\\n<h4>可能做錯了什麼</h4>\\n<p>在使用者進入app之前問太多資訊可能會導致退火。</p>\\n<p>營運試著獲得更多資訊，但越多資訊填寫，同時也產生越多摩擦。</p>\\n<p>如果你試著一開始就問更多的資訊，確認有解釋每一個動作以便消除摩擦。</p>\\n<p>Samuel Hulick:</p>\\n<blockquote>\\n<p>當使用者註冊的時候，他們的注意力是很珍貴的。你可以想像成在宇宙中被釋放的一小撮空氣 - 你必須盡可能的去使用它當它還在的時候。 最好的方式是靠減少摩擦 - 意思是定義清楚與有意義的動作將會提升使用者通過一開始的流程。<br />\\n舉例來說，如果你想要一個人去做pizza，你不會一開始說\\\"讓我們從揉捏麵糰與煨醬開始\\u001d...\\\"<br />\\n你應該說\\\"讓我們來做個pizza，我們會從揉捏麵糰與煨醬開始\\\"當你圍繞著最終目標而建構兩個活動，這幫助使用者了解為什麼這些是很重要的然要建立動機去完成他們。</p>\\n</blockquote>\\n<p>總結一下，如杲你想要讓使用者通過註冊並且維持使用者體驗，確認他們知道為什麼他們必須完成每一項任務。</p>\\n<ol start=\\\"2\\\">\\n<li>\\n<p>再app登入後才設置帳號</p>\\n<blockquote>\\n<p>註冊(email) -> app -> email認証 -> 設置帳號</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>如同你就看見的，使用者在輸入email之後可以立即登入app，再那之後使用者被要求驗証email，接著就可以使用app的更多細節。</p>\\n<h4>這有什麼好處</h4>\\n<p>延遲輸入必要的資訊可以減少很多的摩擦 - 像是密碼。</p>\\n<p>想出一個好的，具有安全性的密碼是一項艱懼的任務，早期移除密碼需求(至少在認証之前)對於使用者來說更簡單，然後你仍然拿到他們的email可以進行再行銷。</p>\\n<p>Samuel Hulick:</p>\\n<blockquote>\\n<p>Email認証還是很重要的一環，我還沒有找到一個好的理由去使用一個全新的註冊方式，告訢他們email收件會使他們分心而喪失了更進一步了解產品的機會。</p>\\n</blockquote>\\n<p>邏輯很簡單:如果使用者喜歡你的產品，他們會更願意去做他們的email認証與設置他們的帳號。</p>\\n<p>如果你跟著步驟走，你會注意到兩件事情:</p>\\n<ul>\\n<li>整個流程是使用者中心的 - 人們在花費多餘的精力設置帳號前就能進到產品中。</li>\\n<li>願意完整將帳號建置好的使用者是很重要的評估者。你可以很容易的從平常的註冊中分類，因此，你可以集中的制訂你的行銷與銷售策略，減少花費在假客戶上的努力。</li>\\n</ul>\\n<h4>可能做錯了什麼</h4>\\n<p>有一個缺點:你不能減少垃圾郵件發送者與假客戶。同時間，若是有客戶想要探索產品，認証信箱還是一個無可避免的摩擦。</p>\\n<p>而且，你不會取得太多的使用者資訊，有時候，因為一連串的前置行為，會產生承諾偏差，代表更高品質的客戶。通常來說，越少的資訊能取得的是更多\\\"質+量\\\"的使用者。</p>\\n<ol start=\\\"3\\\">\\n<li>\\n<p>直接進入app裡面</p>\\n<blockquote>\\n<p>app -> 註冊(email+ 密碼) -> email確認 -> 帳號設置</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>最懶與最輕鬆的註冊流程，使用者可以直接進入app，在那之後才會被提示註冊。</p>\\n<h4>這有什麼好處</h4>\\n<p>這種註冊流程最大的好處就是一點摩擦都沒有，一開始的時候不需要註程。</p>\\n<p>Luke Wroblewski相信註冊流程不能存在。相反的，他相信這種漸進式參與(那是他如何稱呼慢註冊的)對於初次的使用者是最好的流程。</p>\\n<p>展示你的產品，讓你的客戶獲得馬上的體驗，只有他們想使用進階的功能時才會進一步詢問他們資訊。他推薦這是最好的實作。</p>\\n<p>Luke Wroblewski:</p>\\n<blockquote>\\n<p>當策畫使用者對你網路服務的初始體驗時，想想你可以如何使用漸進式參與來避免註冊流程。<br>\\n如果你不選擇漸進式參與的方法，確保紿予潛在客戶他們該如何使用你的服務與該注意的事情等足夠的資訊。<br>\\n如果你選擇了為潛在客戶自動產生帳號，確保他們有清楚的方式進入他們的帳號。<br>\\n不使用漸進式參與會很客易使使用者在經過多頁的註冊與input欄位中分散他們的注意力。這會造成很大的機率減少效率與使使用者不開心。</p>\\n</blockquote>\\n<h4>可能做錯了什麼</h4>\\n<p>每個硬幣都有正反面，沒有一個是例外的。</p>\\n<p>從商業來看，你會失去很珍貴的客戶資訊 - 他們的email。所以你不可能碰處到那些你期望的客戶。你只能依賴他們依照他們自己的根據去進行的動作。</p>\\n<p>如果你的產品才剛開始，接觸你的客戶是非常困難的。但這是唯一的方式能得到即時的回饋讓你可以持續的潤飾與測試你的產品。</p>\\n<p>同時這個模型也有客戶端的缺點。 Harry Brignull嘗試了這個方式，下面是他必須說的</p>\\n<p>Harry Brignull:</p>\\n<blockquote>\\n<p>我們使用慢註冊(也稱被動註冊，漸進註冊)設計了一個搜尋工作的網站，人們在申請工作與設置email通知前不須要註冊。<br>\\n這在增加轉換率上非常的成功，我們決定在發佈工作的UI上也做同樣的事情 - 這是一個讓顧主發佈他們工作廣告、多樣分類然後付款的地方。<br>\\n我們做了易用性測試，然後每個使用過的招募者都紿了不及格的分數。為什麼?因為他們不放心花了15分鍾所寫的工作內容沒有被存在安全的地方。他們寧願使用提前註冊的版本。<br>\\n這一次很有趣，使用者研究指出了可以大幅減少開發的選項，這同時也告訴我們你不能盲目地將一個情境下的設計模式複製到另一個情境然後期望可以很好的整合與成功。情境才是最關鍵的。</p>\\n</blockquote>\\n<p>然後，這邊又提出另一個問題 - 摩擦總是壞人嗎?</p>\\n<h3>摩擦有時候對於註冊流程是好的</h3>\\n<p>摩擦被故意加入註冊流程可以被示為目的導向摩擦。通常可以造成下列的效果:</p>\\n<ul>\\n<li>增加註冊的質量 或</li>\\n<li>改善使用者戶動</li>\\n</ul>\\n<h3>結論</h3>\\n<p>每一種的註冊流程都有各自的優缺點，他們都適合不同的情境。沒有一件事情是決對會增加使用者體驗或是轉換率的。試著反問自己:</p>\\n<ul>\\n<li>\\n<p>目的是什麼?什麼是你嘗試在註冊流程完成的然後透過什麼步驟可以達成。獲得資訊、引導質量、引導數量、使用者體驗 - 什麼是你想要達成的。</p>\\n</li>\\n<li>\\n<p>什麼是你的觀眾所愛的?不同的人會有不一樣的隱私故慮，他們有不同的吸引廣度，他們評量時間與安全的方式不同。對你的觀眾做測試。</p>\\n</li>\\n<li>\\n<p>產品如何?有多複雜?是要用來解決什麼問題?為你的目標巿場建置產品，然後讓使用流程越流暢越好。</p>\\n</li>\\n</ul>\",\"fields\":{\"slug\":\"/posts/sass-signup-flow/\"},\"frontmatter\":{\"title\":\"3 Common SaaS Sign-Up Flows\",\"date\":\"2017-08-20T22:03\",\"tags\":[\"UI/UX\"]}}},\"pathContext\":{\"slug\":\"/posts/sass-signup-flow/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-sass-signup-flow-b1bc62d9e77961802f01.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"前端小誌\",\"author\":\"Ernie Yang\"}},\"markdownRemark\":{\"id\":\"/Users/ernieyang09/Desktop/workspace/gatsby-blog/src/pages/posts/2017/08/0820--sass-signup-flow.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><snippet>譯: <a href=\\\"https://conversionxl.com/blog/saas-signup-flows/\\\">3 Common SaaS Sign-Up Flows (and a Friction-Based Analysis)</a></snippet></p>\\n<p>非心理系出身，若是有專有名詞翻錯，請指正。</p>\\n<p>摩擦</p>\\n<blockquote>\\n<p>當參訪者嘗試完成一個動作的時候所遇到的心理上的反抗，是轉換率殺手。</p>\\n</blockquote>\\n<p>你可以試著優化產品的價值主張與call to action buttons(行動按鈕)，但若是你的註冊流程包涵了太多的摩擦，你就會流失你的客戶。</p>\\n<p>減少摩擦就是最有效率增加轉換率的方式。然而，如果你只是胡亂猜測的話，是很難去辨識摩擦來源的。</p>\\n<p>摩擦會出現在網頁的各處，我們這邊只講註冊流程，也是通常摩擦最容易發生的地方。</p>\\n<h3>摩擦與註冊流程</h3>\\n<p>摩擦就是使用者必須要多精通註冊流程的測量。</p>\\n<p>雖然因為多樣性與客觀性很難去量化標準，但還是可以使用三種因子去做評估</p>\\n<ol>\\n<li>\\n<p>完成步驟 - 使用者會經過的一連串的頁面與步驟的數量。</p>\\n</li>\\n<li>\\n<p>資訊代價 - 使用者必須填寫的資訊數量。</p>\\n</li>\\n<li>\\n<p>付出投資 - 使用者必須做的決定與額外須要完成的活動。(像是email認証，CAPTCHA，其他...)</p>\\n</li>\\n</ol>\\n<p>這邊有幾種註冊流程的設計方式，他們各自有優缺點。但是最終的目的都是為了減少摩擦，最大價值化客戶與利潤。</p>\\n<h3>三種常見的註冊流程與如何減少摩擦</h3>\\n<p>雖然市面上有很多種註冊流程，通常可以分為以下三類，各自都有優缺點，當然也要考慮到你的產品與使用情境。\\n總而言之，這裡有三種常見的使用情境與評論。</p>\\n<ol>\\n<li>\\n<p>完整的流程後登入app</p>\\n<blockquote>\\n<p>註冊(Email+密碼) -> 帳號設置 -> Email確認 -> App</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>這差不多是現今最常見的註冊流程，使用者先將所有資訊填好，之後才能登入程式。</p>\\n<h4>這有什麼好處</h4>\\n<p>對於初始者非常熟悉此流程，人腦對於流程如何進行會先定義心智模型。所以當他們看到相關的模型，在認知上只須要花很少的力。因此我們對於這個流程就感到不錯。</p>\\n<p>另外一個主要的原因就是我們可以確保垃圾郵件發送者會盡可能的遠離我們的app。安全性十足。</p>\\n<h4>可能做錯了什麼</h4>\\n<p>在使用者進入app之前問太多資訊可能會導致退火。</p>\\n<p>營運試著獲得更多資訊，但越多資訊填寫，同時也產生越多摩擦。</p>\\n<p>如果你試著一開始就問更多的資訊，確認有解釋每一個動作以便消除摩擦。</p>\\n<p>Samuel Hulick:</p>\\n<blockquote>\\n<p>當使用者註冊的時候，他們的注意力是很珍貴的。你可以想像成在宇宙中被釋放的一小撮空氣 - 你必須盡可能的去使用它當它還在的時候。 最好的方式是靠減少摩擦 - 意思是定義清楚與有意義的動作將會提升使用者通過一開始的流程。<br />\\n舉例來說，如果你想要一個人去做pizza，你不會一開始說\\\"讓我們從揉捏麵糰與煨醬開始\\u001d...\\\"<br />\\n你應該說\\\"讓我們來做個pizza，我們會從揉捏麵糰與煨醬開始\\\"當你圍繞著最終目標而建構兩個活動，這幫助使用者了解為什麼這些是很重要的然要建立動機去完成他們。</p>\\n</blockquote>\\n<p>總結一下，如杲你想要讓使用者通過註冊並且維持使用者體驗，確認他們知道為什麼他們必須完成每一項任務。</p>\\n<ol start=\\\"2\\\">\\n<li>\\n<p>再app登入後才設置帳號</p>\\n<blockquote>\\n<p>註冊(email) -> app -> email認証 -> 設置帳號</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>如同你就看見的，使用者在輸入email之後可以立即登入app，再那之後使用者被要求驗証email，接著就可以使用app的更多細節。</p>\\n<h4>這有什麼好處</h4>\\n<p>延遲輸入必要的資訊可以減少很多的摩擦 - 像是密碼。</p>\\n<p>想出一個好的，具有安全性的密碼是一項艱懼的任務，早期移除密碼需求(至少在認証之前)對於使用者來說更簡單，然後你仍然拿到他們的email可以進行再行銷。</p>\\n<p>Samuel Hulick:</p>\\n<blockquote>\\n<p>Email認証還是很重要的一環，我還沒有找到一個好的理由去使用一個全新的註冊方式，告訢他們email收件會使他們分心而喪失了更進一步了解產品的機會。</p>\\n</blockquote>\\n<p>邏輯很簡單:如果使用者喜歡你的產品，他們會更願意去做他們的email認証與設置他們的帳號。</p>\\n<p>如果你跟著步驟走，你會注意到兩件事情:</p>\\n<ul>\\n<li>整個流程是使用者中心的 - 人們在花費多餘的精力設置帳號前就能進到產品中。</li>\\n<li>願意完整將帳號建置好的使用者是很重要的評估者。你可以很容易的從平常的註冊中分類，因此，你可以集中的制訂你的行銷與銷售策略，減少花費在假客戶上的努力。</li>\\n</ul>\\n<h4>可能做錯了什麼</h4>\\n<p>有一個缺點:你不能減少垃圾郵件發送者與假客戶。同時間，若是有客戶想要探索產品，認証信箱還是一個無可避免的摩擦。</p>\\n<p>而且，你不會取得太多的使用者資訊，有時候，因為一連串的前置行為，會產生承諾偏差，代表更高品質的客戶。通常來說，越少的資訊能取得的是更多\\\"質+量\\\"的使用者。</p>\\n<ol start=\\\"3\\\">\\n<li>\\n<p>直接進入app裡面</p>\\n<blockquote>\\n<p>app -> 註冊(email+ 密碼) -> email確認 -> 帳號設置</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>最懶與最輕鬆的註冊流程，使用者可以直接進入app，在那之後才會被提示註冊。</p>\\n<h4>這有什麼好處</h4>\\n<p>這種註冊流程最大的好處就是一點摩擦都沒有，一開始的時候不需要註程。</p>\\n<p>Luke Wroblewski相信註冊流程不能存在。相反的，他相信這種漸進式參與(那是他如何稱呼慢註冊的)對於初次的使用者是最好的流程。</p>\\n<p>展示你的產品，讓你的客戶獲得馬上的體驗，只有他們想使用進階的功能時才會進一步詢問他們資訊。他推薦這是最好的實作。</p>\\n<p>Luke Wroblewski:</p>\\n<blockquote>\\n<p>當策畫使用者對你網路服務的初始體驗時，想想你可以如何使用漸進式參與來避免註冊流程。<br>\\n如果你不選擇漸進式參與的方法，確保紿予潛在客戶他們該如何使用你的服務與該注意的事情等足夠的資訊。<br>\\n如果你選擇了為潛在客戶自動產生帳號，確保他們有清楚的方式進入他們的帳號。<br>\\n不使用漸進式參與會很客易使使用者在經過多頁的註冊與input欄位中分散他們的注意力。這會造成很大的機率減少效率與使使用者不開心。</p>\\n</blockquote>\\n<h4>可能做錯了什麼</h4>\\n<p>每個硬幣都有正反面，沒有一個是例外的。</p>\\n<p>從商業來看，你會失去很珍貴的客戶資訊 - 他們的email。所以你不可能碰處到那些你期望的客戶。你只能依賴他們依照他們自己的根據去進行的動作。</p>\\n<p>如果你的產品才剛開始，接觸你的客戶是非常困難的。但這是唯一的方式能得到即時的回饋讓你可以持續的潤飾與測試你的產品。</p>\\n<p>同時這個模型也有客戶端的缺點。 Harry Brignull嘗試了這個方式，下面是他必須說的</p>\\n<p>Harry Brignull:</p>\\n<blockquote>\\n<p>我們使用慢註冊(也稱被動註冊，漸進註冊)設計了一個搜尋工作的網站，人們在申請工作與設置email通知前不須要註冊。<br>\\n這在增加轉換率上非常的成功，我們決定在發佈工作的UI上也做同樣的事情 - 這是一個讓顧主發佈他們工作廣告、多樣分類然後付款的地方。<br>\\n我們做了易用性測試，然後每個使用過的招募者都紿了不及格的分數。為什麼?因為他們不放心花了15分鍾所寫的工作內容沒有被存在安全的地方。他們寧願使用提前註冊的版本。<br>\\n這一次很有趣，使用者研究指出了可以大幅減少開發的選項，這同時也告訴我們你不能盲目地將一個情境下的設計模式複製到另一個情境然後期望可以很好的整合與成功。情境才是最關鍵的。</p>\\n</blockquote>\\n<p>然後，這邊又提出另一個問題 - 摩擦總是壞人嗎?</p>\\n<h3>摩擦有時候對於註冊流程是好的</h3>\\n<p>摩擦被故意加入註冊流程可以被示為目的導向摩擦。通常可以造成下列的效果:</p>\\n<ul>\\n<li>增加註冊的質量 或</li>\\n<li>改善使用者戶動</li>\\n</ul>\\n<h3>結論</h3>\\n<p>每一種的註冊流程都有各自的優缺點，他們都適合不同的情境。沒有一件事情是決對會增加使用者體驗或是轉換率的。試著反問自己:</p>\\n<ul>\\n<li>\\n<p>目的是什麼?什麼是你嘗試在註冊流程完成的然後透過什麼步驟可以達成。獲得資訊、引導質量、引導數量、使用者體驗 - 什麼是你想要達成的。</p>\\n</li>\\n<li>\\n<p>什麼是你的觀眾所愛的?不同的人會有不一樣的隱私故慮，他們有不同的吸引廣度，他們評量時間與安全的方式不同。對你的觀眾做測試。</p>\\n</li>\\n<li>\\n<p>產品如何?有多複雜?是要用來解決什麼問題?為你的目標巿場建置產品，然後讓使用流程越流暢越好。</p>\\n</li>\\n</ul>\",\"fields\":{\"slug\":\"/posts/sass-signup-flow/\"},\"frontmatter\":{\"title\":\"3 Common SaaS Sign-Up Flows\",\"date\":\"2017-08-20T22:03\",\"tags\":[\"UI/UX\"]}}},\"pathContext\":{\"slug\":\"/posts/sass-signup-flow/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-sass-signup-flow.json\n// module id = 475\n// module chunks = 237806451912131"],"sourceRoot":""}
{"version":3,"sources":["webpack:///path---posts-what-s-thunk-919fe6f65307be529d32.js","webpack:///./.cache/json/posts-what-s-thunk.json"],"names":["webpackJsonp","476","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","fields","slug","frontmatter","date","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,OAAAC,OAAA,eAAsCC,gBAAmBC,GAAA,oIAAAC,KAAA,4lNAAq2NC,QAA+HC,KAAA,wBAA8BC,aAAgBP,MAAA,WAAAQ,KAAA,mBAAAC,MAAA,qCAAyFC,aAAgBJ,KAAA","file":"path---posts-what-s-thunk-919fe6f65307be529d32.js","sourcesContent":["webpackJsonp([30306821036680],{\n\n/***/ 476:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"前端小誌\",\"author\":\"Ernie Yang\"}},\"markdownRemark\":{\"id\":\"/Users/ernieyang09/Desktop/workspace/gatsby-blog/src/pages/posts/2018/01/0113--what-s-thunk.md absPath of file >>> MarkdownRemark\",\"html\":\"<snippet>\\n會知道thunk這個單字也是因為react-thunk，一開始也是傻傻的用，後來才常常在functional的文章看到這個詞，整理整理希望能對functional programming更了解。\\n</snippet>\\n<p>根據wiki的定義</p>\\n<blockquote>\\n<p>In computer programming, a thunk is a subroutine used to inject an additional calculation into another subroutine. Thunks are primarily used to delay a calculation until it is needed, or to insert operations at the beginning or end of the other subroutine. They have a variety of other applications to compiler code generation and in modular programming.</p>\\n</blockquote>\\n<p>我的翻譯是thunk是其他程序要計算之前的另一個處理程序，不過聽起來很繞口，也不知道實際用途。</p>\\n<p>這就要探討電腦世界中的求值策略(Evaluation strategy)了-定義何時和以何種次序求值給函式的實際參數，什麼時候把它們代換入函式，和代換以何種形式發生。</p>\\n<p>假設我們在\\bjavascript中，做以下的事情</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">add</span> <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">=></span> num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>那function的參數到底是什麼時候被計算?</p>\\n<p>if 傳值呼叫(call by value)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">add</span> <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">=></span> num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ==> add(3)</span></code></pre>\\n      </div>\\n<p>if 傳名呼叫 (Call by name)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">add</span> <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">=></span> num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ==> (x + 2) + 1</span></code></pre>\\n      </div>\\n<p>如果今天的參數不是一個簡單的(x + 2)，而是一個複雜的計算，且function裡面沒有用到(可能沒有走進if else \\bcondition)，那其實先將值求好是沒有義意的，所以傳名呼叫更傾向於原封不動的將參數先放入，等有需要的時候再使用。</p>\\n<p>不過javascript的實作是傳值呼叫，所以我們會依靠thunk來幫我們處理此問題。</p>\\n<p>所以thunk有一個很重要的特性就是lazy evaluation，表達式不在它被綁定到變量之後就立即求值，而是在該值被取用的時候求值。</p>\\n<p>所以redux-thunk表達的是delay(\\blazy) dispatch的直接使用。</p>\\n<p>在javscript裡面寫成high order function就是thunk的應用(待求証)。假設我有一個判斷session的\\b\\bapi，可能在很多地方使用，可以寫成以下。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">\\b<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">checkSession</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'MY_API/session'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// any place</span>\\n<span class=\\\"token keyword\\\">const</span> isLoggin <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">checkSession</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>你不用直接的把值求出來，而是用到的時候再呼叫。</p>\\n<p>如果是每次都一定會用到的值或是沒必要delay就不要用thunk了，因為thunk多跑了一層function反而會降低效率。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> action1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">TEST</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//多跑一層</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">action2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> dispatch <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">TEST</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>正規的lazy evaluation是call by need，這是進階的call by name</p>\\n<blockquote>\\n<p>Call by need is a memoized version of call by name.</p>\\n</blockquote>\\n<p>在function\\bal的世界中，給定一個function，每次給相同的input必定得到相同的output，我們可以稱這為pure function。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">f(x) = g(x) + 1</code></pre>\\n      </div>\\n<p>若是g(x)為很heavy或是expensive的function，那我們可以做memized將算完的結果儲存。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">cache = {}\\ncache[v] = y</code></pre>\\n      </div>\\n<p>另外一個lazy evaluation的特性是最小化求值，這下次講functional的performance issue再提囉。</p>\",\"fields\":{\"slug\":\"/posts/what-s-thunk/\"},\"frontmatter\":{\"title\":\"thunk是什麼\",\"date\":\"2018-01-13T10:32\",\"tags\":[\"react\",\"functional programming\"]}}},\"pathContext\":{\"slug\":\"/posts/what-s-thunk/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-what-s-thunk-919fe6f65307be529d32.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"前端小誌\",\"author\":\"Ernie Yang\"}},\"markdownRemark\":{\"id\":\"/Users/ernieyang09/Desktop/workspace/gatsby-blog/src/pages/posts/2018/01/0113--what-s-thunk.md absPath of file >>> MarkdownRemark\",\"html\":\"<snippet>\\n會知道thunk這個單字也是因為react-thunk，一開始也是傻傻的用，後來才常常在functional的文章看到這個詞，整理整理希望能對functional programming更了解。\\n</snippet>\\n<p>根據wiki的定義</p>\\n<blockquote>\\n<p>In computer programming, a thunk is a subroutine used to inject an additional calculation into another subroutine. Thunks are primarily used to delay a calculation until it is needed, or to insert operations at the beginning or end of the other subroutine. They have a variety of other applications to compiler code generation and in modular programming.</p>\\n</blockquote>\\n<p>我的翻譯是thunk是其他程序要計算之前的另一個處理程序，不過聽起來很繞口，也不知道實際用途。</p>\\n<p>這就要探討電腦世界中的求值策略(Evaluation strategy)了-定義何時和以何種次序求值給函式的實際參數，什麼時候把它們代換入函式，和代換以何種形式發生。</p>\\n<p>假設我們在\\bjavascript中，做以下的事情</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">add</span> <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">=></span> num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>那function的參數到底是什麼時候被計算?</p>\\n<p>if 傳值呼叫(call by value)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">add</span> <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">=></span> num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ==> add(3)</span></code></pre>\\n      </div>\\n<p>if 傳名呼叫 (Call by name)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">add</span> <span class=\\\"token operator\\\">=</span> num <span class=\\\"token operator\\\">=></span> num <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ==> (x + 2) + 1</span></code></pre>\\n      </div>\\n<p>如果今天的參數不是一個簡單的(x + 2)，而是一個複雜的計算，且function裡面沒有用到(可能沒有走進if else \\bcondition)，那其實先將值求好是沒有義意的，所以傳名呼叫更傾向於原封不動的將參數先放入，等有需要的時候再使用。</p>\\n<p>不過javascript的實作是傳值呼叫，所以我們會依靠thunk來幫我們處理此問題。</p>\\n<p>所以thunk有一個很重要的特性就是lazy evaluation，表達式不在它被綁定到變量之後就立即求值，而是在該值被取用的時候求值。</p>\\n<p>所以redux-thunk表達的是delay(\\blazy) dispatch的直接使用。</p>\\n<p>在javscript裡面寫成high order function就是thunk的應用(待求証)。假設我有一個判斷session的\\b\\bapi，可能在很多地方使用，可以寫成以下。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">\\b<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">checkSession</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'MY_API/session'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// any place</span>\\n<span class=\\\"token keyword\\\">const</span> isLoggin <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">checkSession</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>你不用直接的把值求出來，而是用到的時候再呼叫。</p>\\n<p>如果是每次都一定會用到的值或是沒必要delay就不要用thunk了，因為thunk多跑了一層function反而會降低效率。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> action1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">TEST</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//多跑一層</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">action2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> dispatch <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">TEST</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>正規的lazy evaluation是call by need，這是進階的call by name</p>\\n<blockquote>\\n<p>Call by need is a memoized version of call by name.</p>\\n</blockquote>\\n<p>在function\\bal的世界中，給定一個function，每次給相同的input必定得到相同的output，我們可以稱這為pure function。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">f(x) = g(x) + 1</code></pre>\\n      </div>\\n<p>若是g(x)為很heavy或是expensive的function，那我們可以做memized將算完的結果儲存。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">cache = {}\\ncache[v] = y</code></pre>\\n      </div>\\n<p>另外一個lazy evaluation的特性是最小化求值，這下次講functional的performance issue再提囉。</p>\",\"fields\":{\"slug\":\"/posts/what-s-thunk/\"},\"frontmatter\":{\"title\":\"thunk是什麼\",\"date\":\"2018-01-13T10:32\",\"tags\":[\"react\",\"functional programming\"]}}},\"pathContext\":{\"slug\":\"/posts/what-s-thunk/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-what-s-thunk.json\n// module id = 476\n// module chunks = 30306821036680"],"sourceRoot":""}